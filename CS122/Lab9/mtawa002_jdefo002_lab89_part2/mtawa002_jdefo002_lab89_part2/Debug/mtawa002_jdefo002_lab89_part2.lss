
mtawa002_jdefo002_lab89_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000004f6  0000058a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800112  00800112  0000059c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000037d  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000198  00000000  00000000  000009b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000505  00000000  00000000  00000b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e3  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000119  00000000  00000000  00001407  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
   6:	00 00       	nop
   8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
   a:	00 00       	nop
   c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
   e:	00 00       	nop
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
  12:	00 00       	nop
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
  16:	00 00       	nop
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
  22:	00 00       	nop
  24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
  26:	00 00       	nop
  28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
  32:	00 00       	nop
  34:	7c c0       	rjmp	.+248    	; 0x12e <__vector_13>
  36:	00 00       	nop
  38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
  42:	00 00       	nop
  44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
  56:	00 00       	nop
  58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
  62:	00 00       	nop
  64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
  66:	00 00       	nop
  68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
  72:	00 00       	nop
  74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
  76:	00 00       	nop
  78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
  82:	00 00       	nop
  84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
  86:	00 00       	nop
  88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e3 00       	.word	0x00e3	; ????
  8e:	e7 00       	.word	0x00e7	; ????
  90:	0f 01       	movw	r0, r30
  92:	37 01       	movw	r6, r14
  94:	62 01       	movw	r12, r4
  96:	23 01       	movw	r4, r6
  98:	4b 01       	movw	r8, r22
  9a:	76 01       	movw	r14, r12
  9c:	9c 01       	movw	r18, r24
  9e:	a4 01       	movw	r20, r8
  a0:	dd 01       	movw	r26, r26
  a2:	16 02       	muls	r17, r22
  a4:	c0 01       	movw	r24, r0
  a6:	f9 01       	movw	r30, r18
  a8:	32 02       	muls	r19, r18

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e4       	ldi	r29, 0x40	; 64
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	11 e0       	ldi	r17, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	e6 ef       	ldi	r30, 0xF6	; 246
  be:	f4 e0       	ldi	r31, 0x04	; 4
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	0b bf       	out	0x3b, r16	; 59
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a2 31       	cpi	r26, 0x12	; 18
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	a2 e1       	ldi	r26, 0x12	; 18
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	ac 31       	cpi	r26, 0x1C	; 28
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	de d1       	rcall	.+956    	; 0x49e <main>
  e2:	07 c2       	rjmp	.+1038   	; 0x4f2 <_exit>

000000e4 <__bad_interrupt>:
  e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <TimerOn>:
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  e6:	8b e0       	ldi	r24, 0x0B	; 11
  e8:	80 93 81 00 	sts	0x0081, r24
  ec:	8d e7       	ldi	r24, 0x7D	; 125
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 89 00 	sts	0x0089, r25
  f4:	80 93 88 00 	sts	0x0088, r24
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 6f 00 	sts	0x006F, r24
  fe:	10 92 85 00 	sts	0x0085, r1
 102:	10 92 84 00 	sts	0x0084, r1
 106:	80 91 0e 01 	lds	r24, 0x010E
 10a:	90 91 0f 01 	lds	r25, 0x010F
 10e:	a0 91 10 01 	lds	r26, 0x0110
 112:	b0 91 11 01 	lds	r27, 0x0111
 116:	80 93 16 01 	sts	0x0116, r24
 11a:	90 93 17 01 	sts	0x0117, r25
 11e:	a0 93 18 01 	sts	0x0118, r26
 122:	b0 93 19 01 	sts	0x0119, r27
 126:	8f b7       	in	r24, 0x3f	; 63
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8f bf       	out	0x3f, r24	; 63
 12c:	08 95       	ret

0000012e <__vector_13>:
}

ISR(TIMER1_COMPA_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 140:	80 91 16 01 	lds	r24, 0x0116
 144:	90 91 17 01 	lds	r25, 0x0117
 148:	a0 91 18 01 	lds	r26, 0x0118
 14c:	b0 91 19 01 	lds	r27, 0x0119
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	a1 09       	sbc	r26, r1
 154:	b1 09       	sbc	r27, r1
 156:	80 93 16 01 	sts	0x0116, r24
 15a:	90 93 17 01 	sts	0x0117, r25
 15e:	a0 93 18 01 	sts	0x0118, r26
 162:	b0 93 19 01 	sts	0x0119, r27
	if (_avr_timer_cntcurr == 0) {
 166:	89 2b       	or	r24, r25
 168:	8a 2b       	or	r24, r26
 16a:	8b 2b       	or	r24, r27
 16c:	99 f4       	brne	.+38     	; 0x194 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 1a 01 	sts	0x011A, r24
ISR(TIMER1_COMPA_vect)
{
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 174:	80 91 0e 01 	lds	r24, 0x010E
 178:	90 91 0f 01 	lds	r25, 0x010F
 17c:	a0 91 10 01 	lds	r26, 0x0110
 180:	b0 91 11 01 	lds	r27, 0x0111
 184:	80 93 16 01 	sts	0x0116, r24
 188:	90 93 17 01 	sts	0x0117, r25
 18c:	a0 93 18 01 	sts	0x0118, r26
 190:	b0 93 19 01 	sts	0x0119, r27
	}
}
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <TickFct_part1>:
int numPhasesFull = (360 / 5.625) * 64; 
int counter = 0; 
char phases[] = {0x01, 0x03,0x02, 0x06, 0x04, 0x0C, 0x08, 0x09}; //A, AB, B, BC, C, CD, D, DA
unsigned char direction = 0;
void TickFct_part1(){
	direction = (~PINB) & 0x3F; 
 1a6:	23 b1       	in	r18, 0x03	; 3
 1a8:	20 95       	com	r18
 1aa:	2f 73       	andi	r18, 0x3F	; 63
 1ac:	20 93 12 01 	sts	0x0112, r18
	switch(sm_state){
 1b0:	80 91 1b 01 	lds	r24, 0x011B
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	88 30       	cpi	r24, 0x08	; 8
 1b8:	91 05       	cpc	r25, r1
 1ba:	08 f0       	brcs	.+2      	; 0x1be <TickFct_part1+0x18>
 1bc:	ae c0       	rjmp	.+348    	; 0x31a <TickFct_part1+0x174>
 1be:	fc 01       	movw	r30, r24
 1c0:	ea 5b       	subi	r30, 0xBA	; 186
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	90 c1       	rjmp	.+800    	; 0x4e6 <__tablejump2__>
		case INIT:
			sm_state = wait_input;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 1b 01 	sts	0x011B, r24
			break;
 1cc:	b5 c0       	rjmp	.+362    	; 0x338 <TickFct_part1+0x192>
		case wait_input:
			if (direction == 0x00 ){
 1ce:	22 23       	and	r18, r18
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <TickFct_part1+0x2e>
 1d2:	b2 c0       	rjmp	.+356    	; 0x338 <TickFct_part1+0x192>
				sm_state = wait_input;
			}
			else if (direction == 0x01)
 1d4:	21 30       	cpi	r18, 0x01	; 1
 1d6:	21 f4       	brne	.+8      	; 0x1e0 <TickFct_part1+0x3a>
			{
				sm_state = forward_quarter;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	80 93 1b 01 	sts	0x011B, r24
 1de:	b4 c0       	rjmp	.+360    	; 0x348 <TickFct_part1+0x1a2>
			}
			else if (direction == 0x02){
 1e0:	22 30       	cpi	r18, 0x02	; 2
 1e2:	21 f4       	brne	.+8      	; 0x1ec <TickFct_part1+0x46>
				sm_state = forward_half;
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	80 93 1b 01 	sts	0x011B, r24
 1ea:	e7 c0       	rjmp	.+462    	; 0x3ba <TickFct_part1+0x214>
			}
			else if (direction == 0x04){
 1ec:	24 30       	cpi	r18, 0x04	; 4
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <TickFct_part1+0x52>
				sm_state = forward_full;
 1f0:	84 e0       	ldi	r24, 0x04	; 4
 1f2:	80 93 1b 01 	sts	0x011B, r24
 1f6:	1a c1       	rjmp	.+564    	; 0x42c <TickFct_part1+0x286>
			}
			else if (direction == 0x08){
 1f8:	28 30       	cpi	r18, 0x08	; 8
 1fa:	21 f4       	brne	.+8      	; 0x204 <TickFct_part1+0x5e>
				sm_state = backward_quarter;
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	80 93 1b 01 	sts	0x011B, r24
 202:	be c0       	rjmp	.+380    	; 0x380 <TickFct_part1+0x1da>
			}
			else if (direction == 0x10){
 204:	20 31       	cpi	r18, 0x10	; 16
 206:	21 f4       	brne	.+8      	; 0x210 <TickFct_part1+0x6a>
				sm_state = backward_half;
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	80 93 1b 01 	sts	0x011B, r24
 20e:	f1 c0       	rjmp	.+482    	; 0x3f2 <TickFct_part1+0x24c>
			}
			else if (direction == 0x20){
 210:	20 32       	cpi	r18, 0x20	; 32
 212:	09 f0       	breq	.+2      	; 0x216 <TickFct_part1+0x70>
 214:	91 c0       	rjmp	.+290    	; 0x338 <TickFct_part1+0x192>
				sm_state = backward_full;
 216:	87 e0       	ldi	r24, 0x07	; 7
 218:	80 93 1b 01 	sts	0x011B, r24
 21c:	23 c1       	rjmp	.+582    	; 0x464 <TickFct_part1+0x2be>
			}

			break;
		case forward_quarter:
			if (counter <= numPhasesQuarter){
 21e:	20 91 13 01 	lds	r18, 0x0113
 222:	30 91 14 01 	lds	r19, 0x0114
 226:	80 91 0c 01 	lds	r24, 0x010C
 22a:	90 91 0d 01 	lds	r25, 0x010D
 22e:	82 17       	cp	r24, r18
 230:	93 07       	cpc	r25, r19
 232:	0c f0       	brlt	.+2      	; 0x236 <TickFct_part1+0x90>
 234:	89 c0       	rjmp	.+274    	; 0x348 <TickFct_part1+0x1a2>
				sm_state = forward_quarter;
			}
			else {
				sm_state = wait_input;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 1b 01 	sts	0x011B, r24
				counter = 0;
 23c:	10 92 14 01 	sts	0x0114, r1
 240:	10 92 13 01 	sts	0x0113, r1
 244:	6d c0       	rjmp	.+218    	; 0x320 <TickFct_part1+0x17a>
			}
			break;
		case backward_quarter:
			if (counter <= numPhasesQuarter){
 246:	20 91 13 01 	lds	r18, 0x0113
 24a:	30 91 14 01 	lds	r19, 0x0114
 24e:	80 91 0c 01 	lds	r24, 0x010C
 252:	90 91 0d 01 	lds	r25, 0x010D
 256:	82 17       	cp	r24, r18
 258:	93 07       	cpc	r25, r19
 25a:	0c f0       	brlt	.+2      	; 0x25e <TickFct_part1+0xb8>
 25c:	91 c0       	rjmp	.+290    	; 0x380 <TickFct_part1+0x1da>
				sm_state = backward_quarter;
			}
			else {
				sm_state = wait_input;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 1b 01 	sts	0x011B, r24
				counter = 0;
 264:	10 92 14 01 	sts	0x0114, r1
 268:	10 92 13 01 	sts	0x0113, r1
 26c:	59 c0       	rjmp	.+178    	; 0x320 <TickFct_part1+0x17a>
			}
			break;		
		case forward_half:
			if (counter <= numPhasesHalf){
 26e:	20 91 13 01 	lds	r18, 0x0113
 272:	30 91 14 01 	lds	r19, 0x0114
 276:	80 91 0a 01 	lds	r24, 0x010A
 27a:	90 91 0b 01 	lds	r25, 0x010B
 27e:	82 17       	cp	r24, r18
 280:	93 07       	cpc	r25, r19
 282:	0c f0       	brlt	.+2      	; 0x286 <TickFct_part1+0xe0>
 284:	9a c0       	rjmp	.+308    	; 0x3ba <TickFct_part1+0x214>
				sm_state = forward_half;
			}
			else {
				sm_state = wait_input;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 1b 01 	sts	0x011B, r24
				counter = 0;
 28c:	10 92 14 01 	sts	0x0114, r1
 290:	10 92 13 01 	sts	0x0113, r1
 294:	45 c0       	rjmp	.+138    	; 0x320 <TickFct_part1+0x17a>
			}
			break;
		case backward_half:
			if (counter <= numPhasesHalf){
 296:	20 91 13 01 	lds	r18, 0x0113
 29a:	30 91 14 01 	lds	r19, 0x0114
 29e:	80 91 0a 01 	lds	r24, 0x010A
 2a2:	90 91 0b 01 	lds	r25, 0x010B
 2a6:	82 17       	cp	r24, r18
 2a8:	93 07       	cpc	r25, r19
 2aa:	24 f0       	brlt	.+8      	; 0x2b4 <TickFct_part1+0x10e>
				sm_state = forward_half;
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	80 93 1b 01 	sts	0x011B, r24
 2b2:	83 c0       	rjmp	.+262    	; 0x3ba <TickFct_part1+0x214>
			}
			else {
				sm_state = wait_input;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 1b 01 	sts	0x011B, r24
				counter = 0;
 2ba:	10 92 14 01 	sts	0x0114, r1
 2be:	10 92 13 01 	sts	0x0113, r1
 2c2:	2e c0       	rjmp	.+92     	; 0x320 <TickFct_part1+0x17a>
			}
			break;
		case forward_full:
			if (counter <= numPhasesFull){
 2c4:	20 91 13 01 	lds	r18, 0x0113
 2c8:	30 91 14 01 	lds	r19, 0x0114
 2cc:	80 91 08 01 	lds	r24, 0x0108
 2d0:	90 91 09 01 	lds	r25, 0x0109
 2d4:	82 17       	cp	r24, r18
 2d6:	93 07       	cpc	r25, r19
 2d8:	0c f0       	brlt	.+2      	; 0x2dc <TickFct_part1+0x136>
 2da:	a8 c0       	rjmp	.+336    	; 0x42c <TickFct_part1+0x286>
				sm_state = forward_full;
			}
			else {
				sm_state = wait_input;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 1b 01 	sts	0x011B, r24
				counter = 0;
 2e2:	10 92 14 01 	sts	0x0114, r1
 2e6:	10 92 13 01 	sts	0x0113, r1
 2ea:	1a c0       	rjmp	.+52     	; 0x320 <TickFct_part1+0x17a>
			}
			break;
		case backward_full:
			if (counter <= numPhasesFull){
 2ec:	20 91 13 01 	lds	r18, 0x0113
 2f0:	30 91 14 01 	lds	r19, 0x0114
 2f4:	80 91 08 01 	lds	r24, 0x0108
 2f8:	90 91 09 01 	lds	r25, 0x0109
 2fc:	82 17       	cp	r24, r18
 2fe:	93 07       	cpc	r25, r19
 300:	24 f0       	brlt	.+8      	; 0x30a <TickFct_part1+0x164>
				sm_state = forward_full;
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	80 93 1b 01 	sts	0x011B, r24
 308:	91 c0       	rjmp	.+290    	; 0x42c <TickFct_part1+0x286>
			}
			else {
				sm_state = wait_input;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 1b 01 	sts	0x011B, r24
				counter = 0;
 310:	10 92 14 01 	sts	0x0114, r1
 314:	10 92 13 01 	sts	0x0113, r1
 318:	03 c0       	rjmp	.+6      	; 0x320 <TickFct_part1+0x17a>
			}
			break;			
		default :
			sm_state = INIT;
 31a:	10 92 1b 01 	sts	0x011B, r1
 31e:	08 95       	ret
			break;
	}
	switch(sm_state){
 320:	80 91 1b 01 	lds	r24, 0x011B
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	fc 01       	movw	r30, r24
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	e7 30       	cpi	r30, 0x07	; 7
 32c:	f1 05       	cpc	r31, r1
 32e:	08 f0       	brcs	.+2      	; 0x332 <TickFct_part1+0x18c>
 330:	b5 c0       	rjmp	.+362    	; 0x49c <TickFct_part1+0x2f6>
 332:	e2 5b       	subi	r30, 0xB2	; 178
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	d7 c0       	rjmp	.+430    	; 0x4e6 <__tablejump2__>
		case wait_input:
			PORTA = phases[position]; 
 338:	e0 91 15 01 	lds	r30, 0x0115
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	e0 50       	subi	r30, 0x00	; 0
 340:	ff 4f       	sbci	r31, 0xFF	; 255
 342:	80 81       	ld	r24, Z
 344:	82 b9       	out	0x02, r24	; 2
			break;
 346:	08 95       	ret
		case forward_quarter:
			if (position > 7)
 348:	80 91 15 01 	lds	r24, 0x0115
 34c:	88 30       	cpi	r24, 0x08	; 8
 34e:	10 f0       	brcs	.+4      	; 0x354 <TickFct_part1+0x1ae>
			{
				position = 0; 
 350:	10 92 15 01 	sts	0x0115, r1
			}
			PORTA = phases[position];
 354:	e0 91 15 01 	lds	r30, 0x0115
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	e0 50       	subi	r30, 0x00	; 0
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	80 81       	ld	r24, Z
 360:	82 b9       	out	0x02, r24	; 2
			position++; 
 362:	80 91 15 01 	lds	r24, 0x0115
 366:	8f 5f       	subi	r24, 0xFF	; 255
 368:	80 93 15 01 	sts	0x0115, r24
			counter++;
 36c:	80 91 13 01 	lds	r24, 0x0113
 370:	90 91 14 01 	lds	r25, 0x0114
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	90 93 14 01 	sts	0x0114, r25
 37a:	80 93 13 01 	sts	0x0113, r24
			break;
 37e:	08 95       	ret
		case backward_quarter:
			if (position < 1)
 380:	80 91 15 01 	lds	r24, 0x0115
 384:	81 11       	cpse	r24, r1
 386:	03 c0       	rjmp	.+6      	; 0x38e <TickFct_part1+0x1e8>
			{
				position = 7; 
 388:	87 e0       	ldi	r24, 0x07	; 7
 38a:	80 93 15 01 	sts	0x0115, r24
			}
			PORTA = phases[position];
 38e:	e0 91 15 01 	lds	r30, 0x0115
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	e0 50       	subi	r30, 0x00	; 0
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	80 81       	ld	r24, Z
 39a:	82 b9       	out	0x02, r24	; 2
			position--; 
 39c:	80 91 15 01 	lds	r24, 0x0115
 3a0:	81 50       	subi	r24, 0x01	; 1
 3a2:	80 93 15 01 	sts	0x0115, r24
			counter++;
 3a6:	80 91 13 01 	lds	r24, 0x0113
 3aa:	90 91 14 01 	lds	r25, 0x0114
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	90 93 14 01 	sts	0x0114, r25
 3b4:	80 93 13 01 	sts	0x0113, r24
			break;
 3b8:	08 95       	ret
		case forward_half:
			if (position > 7)
 3ba:	80 91 15 01 	lds	r24, 0x0115
 3be:	88 30       	cpi	r24, 0x08	; 8
 3c0:	10 f0       	brcs	.+4      	; 0x3c6 <TickFct_part1+0x220>
			{
				position = 0;
 3c2:	10 92 15 01 	sts	0x0115, r1
			}
			PORTA = phases[position];
 3c6:	e0 91 15 01 	lds	r30, 0x0115
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	e0 50       	subi	r30, 0x00	; 0
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	80 81       	ld	r24, Z
 3d2:	82 b9       	out	0x02, r24	; 2
			position++;
 3d4:	80 91 15 01 	lds	r24, 0x0115
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	80 93 15 01 	sts	0x0115, r24
			counter++;
 3de:	80 91 13 01 	lds	r24, 0x0113
 3e2:	90 91 14 01 	lds	r25, 0x0114
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	90 93 14 01 	sts	0x0114, r25
 3ec:	80 93 13 01 	sts	0x0113, r24
			break;
 3f0:	08 95       	ret
		case backward_half:
			if (position < 1)
 3f2:	80 91 15 01 	lds	r24, 0x0115
 3f6:	81 11       	cpse	r24, r1
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <TickFct_part1+0x25a>
			{
				position = 7;
 3fa:	87 e0       	ldi	r24, 0x07	; 7
 3fc:	80 93 15 01 	sts	0x0115, r24
			}
			PORTA = phases[position];
 400:	e0 91 15 01 	lds	r30, 0x0115
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	e0 50       	subi	r30, 0x00	; 0
 408:	ff 4f       	sbci	r31, 0xFF	; 255
 40a:	80 81       	ld	r24, Z
 40c:	82 b9       	out	0x02, r24	; 2
			position--;
 40e:	80 91 15 01 	lds	r24, 0x0115
 412:	81 50       	subi	r24, 0x01	; 1
 414:	80 93 15 01 	sts	0x0115, r24
			counter++;
 418:	80 91 13 01 	lds	r24, 0x0113
 41c:	90 91 14 01 	lds	r25, 0x0114
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	90 93 14 01 	sts	0x0114, r25
 426:	80 93 13 01 	sts	0x0113, r24
			break;
 42a:	08 95       	ret
		case forward_full:
			if (position > 7)
 42c:	80 91 15 01 	lds	r24, 0x0115
 430:	88 30       	cpi	r24, 0x08	; 8
 432:	10 f0       	brcs	.+4      	; 0x438 <TickFct_part1+0x292>
			{
				position = 0;
 434:	10 92 15 01 	sts	0x0115, r1
			}
			PORTA = phases[position];
 438:	e0 91 15 01 	lds	r30, 0x0115
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	e0 50       	subi	r30, 0x00	; 0
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	80 81       	ld	r24, Z
 444:	82 b9       	out	0x02, r24	; 2
			position++;
 446:	80 91 15 01 	lds	r24, 0x0115
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	80 93 15 01 	sts	0x0115, r24
			counter++;
 450:	80 91 13 01 	lds	r24, 0x0113
 454:	90 91 14 01 	lds	r25, 0x0114
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	90 93 14 01 	sts	0x0114, r25
 45e:	80 93 13 01 	sts	0x0113, r24
			break;
 462:	08 95       	ret
		case backward_full:
			if (position < 1)
 464:	80 91 15 01 	lds	r24, 0x0115
 468:	81 11       	cpse	r24, r1
 46a:	03 c0       	rjmp	.+6      	; 0x472 <TickFct_part1+0x2cc>
			{
				position = 7;
 46c:	87 e0       	ldi	r24, 0x07	; 7
 46e:	80 93 15 01 	sts	0x0115, r24
			}
			PORTA = phases[position];
 472:	e0 91 15 01 	lds	r30, 0x0115
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	e0 50       	subi	r30, 0x00	; 0
 47a:	ff 4f       	sbci	r31, 0xFF	; 255
 47c:	80 81       	ld	r24, Z
 47e:	82 b9       	out	0x02, r24	; 2
			position--;
 480:	80 91 15 01 	lds	r24, 0x0115
 484:	81 50       	subi	r24, 0x01	; 1
 486:	80 93 15 01 	sts	0x0115, r24
			counter++;
 48a:	80 91 13 01 	lds	r24, 0x0113
 48e:	90 91 14 01 	lds	r25, 0x0114
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	90 93 14 01 	sts	0x0114, r25
 498:	80 93 13 01 	sts	0x0113, r24
 49c:	08 95       	ret

0000049e <main>:
	}
}

int main(void)
{
	DDRB = 0x00; PORTB = 0xFF; // Configure port B's 8 pins as inputs
 49e:	14 b8       	out	0x04, r1	; 4
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	85 b9       	out	0x05, r24	; 5
	DDRA = 0xFF; PORTA = 0x00; // Configure port A's 8 pins as inputs
 4a4:	81 b9       	out	0x01, r24	; 1
 4a6:	12 b8       	out	0x02, r1	; 2

unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 4a8:	83 e0       	ldi	r24, 0x03	; 3
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	a0 e0       	ldi	r26, 0x00	; 0
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	80 93 0e 01 	sts	0x010E, r24
 4b4:	90 93 0f 01 	sts	0x010F, r25
 4b8:	a0 93 10 01 	sts	0x0110, r26
 4bc:	b0 93 11 01 	sts	0x0111, r27
	_avr_timer_cntcurr = _avr_timer_M;
 4c0:	80 93 16 01 	sts	0x0116, r24
 4c4:	90 93 17 01 	sts	0x0117, r25
 4c8:	a0 93 18 01 	sts	0x0118, r26
 4cc:	b0 93 19 01 	sts	0x0119, r27
int main(void)
{
	DDRB = 0x00; PORTB = 0xFF; // Configure port B's 8 pins as inputs
	DDRA = 0xFF; PORTA = 0x00; // Configure port A's 8 pins as inputs
	TimerSet(3);
	TimerOn();
 4d0:	0a de       	rcall	.-1004   	; 0xe6 <TimerOn>
	sm_state = INIT;
 4d2:	10 92 1b 01 	sts	0x011B, r1
		while(1)
	{	
		TickFct_part1();
 4d6:	67 de       	rcall	.-818    	; 0x1a6 <TickFct_part1>
		while(!TimerFlag);
 4d8:	80 91 1a 01 	lds	r24, 0x011A
 4dc:	88 23       	and	r24, r24
 4de:	e1 f3       	breq	.-8      	; 0x4d8 <main+0x3a>
		TimerFlag = 0;
 4e0:	10 92 1a 01 	sts	0x011A, r1
	}
 4e4:	f8 cf       	rjmp	.-16     	; 0x4d6 <main+0x38>

000004e6 <__tablejump2__>:
 4e6:	ee 0f       	add	r30, r30
 4e8:	ff 1f       	adc	r31, r31

000004ea <__tablejump__>:
 4ea:	05 90       	lpm	r0, Z+
 4ec:	f4 91       	lpm	r31, Z
 4ee:	e0 2d       	mov	r30, r0
 4f0:	09 94       	ijmp

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>

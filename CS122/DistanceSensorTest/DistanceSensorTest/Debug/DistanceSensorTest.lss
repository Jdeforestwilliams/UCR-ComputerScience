
DistanceSensorTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002b6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000206  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000143  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000215  00000000  00000000  00000717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f6  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  00000bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000c29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 eb       	ldi	r30, 0xB6	; 182
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	aa d0       	rcall	.+340    	; 0x218 <main>
  c4:	f6 c0       	rjmp	.+492    	; 0x2b2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25
  d6:	80 93 88 00 	sts	0x0088, r24
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24
  e0:	10 92 85 00 	sts	0x0085, r1
  e4:	10 92 84 00 	sts	0x0084, r1
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	90 91 01 01 	lds	r25, 0x0101
  f0:	a0 91 02 01 	lds	r26, 0x0102
  f4:	b0 91 03 01 	lds	r27, 0x0103
  f8:	80 93 06 01 	sts	0x0106, r24
  fc:	90 93 07 01 	sts	0x0107, r25
 100:	a0 93 08 01 	sts	0x0108, r26
 104:	b0 93 09 01 	sts	0x0109, r27
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

ISR(TIMER1_COMPA_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 122:	80 91 06 01 	lds	r24, 0x0106
 126:	90 91 07 01 	lds	r25, 0x0107
 12a:	a0 91 08 01 	lds	r26, 0x0108
 12e:	b0 91 09 01 	lds	r27, 0x0109
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 06 01 	sts	0x0106, r24
 13c:	90 93 07 01 	sts	0x0107, r25
 140:	a0 93 08 01 	sts	0x0108, r26
 144:	b0 93 09 01 	sts	0x0109, r27
	if (_avr_timer_cntcurr == 0) {
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0a 01 	sts	0x010A, r24
ISR(TIMER1_COMPA_vect)
{
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100
 15a:	90 91 01 01 	lds	r25, 0x0101
 15e:	a0 91 02 01 	lds	r26, 0x0102
 162:	b0 91 03 01 	lds	r27, 0x0103
 166:	80 93 06 01 	sts	0x0106, r24
 16a:	90 93 07 01 	sts	0x0107, r25
 16e:	a0 93 08 01 	sts	0x0108, r26
 172:	b0 93 09 01 	sts	0x0109, r27
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TickFct_part1>:

enum SM_States{INIT, trigger, echo} sm_state;
int counter = 0;
void TickFct_part1(){
	switch(sm_state){ //transitions
 188:	80 91 0b 01 	lds	r24, 0x010B
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	81 f0       	breq	.+32     	; 0x1b0 <TickFct_part1+0x28>
 190:	18 f0       	brcs	.+6      	; 0x198 <TickFct_part1+0x10>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	b9 f0       	breq	.+46     	; 0x1c4 <TickFct_part1+0x3c>
 196:	1a c0       	rjmp	.+52     	; 0x1cc <TickFct_part1+0x44>
		case INIT:
			sm_state = trigger;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 0b 01 	sts	0x010B, r24
			PORTA = 0xFF; 
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	82 b9       	out	0x02, r24	; 2
			break;
		default :
			sm_state = INIT;
			break;
	}
	switch(sm_state){ //actions
 1a2:	80 91 0b 01 	lds	r24, 0x010B
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	a1 f0       	breq	.+40     	; 0x1d2 <TickFct_part1+0x4a>
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	f1 f0       	breq	.+60     	; 0x1ea <TickFct_part1+0x62>
 1ae:	08 95       	ret
		case INIT:
			sm_state = trigger;
			PORTA = 0xFF; 
			break;
		case trigger:
			if (counter>= 10){
 1b0:	80 91 04 01 	lds	r24, 0x0104
 1b4:	90 91 05 01 	lds	r25, 0x0105
 1b8:	0a 97       	sbiw	r24, 0x0a	; 10
 1ba:	5c f0       	brlt	.+22     	; 0x1d2 <TickFct_part1+0x4a>
				sm_state = echo;	
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	80 93 0b 01 	sts	0x010B, r24
 1c2:	13 c0       	rjmp	.+38     	; 0x1ea <TickFct_part1+0x62>
			else{
				sm_state = trigger; 
			}
			break;
		case echo:
			sm_state = trigger;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 0b 01 	sts	0x010B, r24
			break;
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <TickFct_part1+0x4a>
		default :
			sm_state = INIT;
 1cc:	10 92 0b 01 	sts	0x010B, r1
 1d0:	08 95       	ret
	}
	switch(sm_state){ //actions
		case INIT:
			break;
		case trigger:
			PORTC = 0xFF;
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	88 b9       	out	0x08, r24	; 8
			counter++;  
 1d6:	80 91 04 01 	lds	r24, 0x0104
 1da:	90 91 05 01 	lds	r25, 0x0105
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 05 01 	sts	0x0105, r25
 1e4:	80 93 04 01 	sts	0x0104, r24
			break;
 1e8:	08 95       	ret
		case echo:
			PORTA = (PINB*10)/58; 
 1ea:	23 b1       	in	r18, 0x03	; 3
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	c9 01       	movw	r24, r18
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	22 0f       	add	r18, r18
 1f6:	33 1f       	adc	r19, r19
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	82 0f       	add	r24, r18
 202:	93 1f       	adc	r25, r19
 204:	6a e3       	ldi	r22, 0x3A	; 58
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	2d d0       	rcall	.+90     	; 0x264 <__divmodhi4>
 20a:	62 b9       	out	0x02, r22	; 2
			PORTC = 0x00;
 20c:	18 b8       	out	0x08, r1	; 8
			counter = 0;  
 20e:	10 92 05 01 	sts	0x0105, r1
 212:	10 92 04 01 	sts	0x0104, r1
 216:	08 95       	ret

00000218 <main>:
	}
}

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00; // Configure port A's 8 pins as inputs
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	81 b9       	out	0x01, r24	; 1
 21c:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0x00;
 21e:	14 b8       	out	0x04, r1	; 4
 220:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 222:	87 b9       	out	0x07, r24	; 7
 224:	18 b8       	out	0x08, r1	; 8

unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	a0 e0       	ldi	r26, 0x00	; 0
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	80 93 00 01 	sts	0x0100, r24
 232:	90 93 01 01 	sts	0x0101, r25
 236:	a0 93 02 01 	sts	0x0102, r26
 23a:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 23e:	80 93 06 01 	sts	0x0106, r24
 242:	90 93 07 01 	sts	0x0107, r25
 246:	a0 93 08 01 	sts	0x0108, r26
 24a:	b0 93 09 01 	sts	0x0109, r27
	DDRA = 0xFF; PORTA = 0x00; // Configure port A's 8 pins as inputs
	DDRB = 0x00; PORTB = 0x00;
	DDRC = 0xFF; PORTC = 0x00;
	//DDRD = 0xFF; PORTD = 0x00; 
	TimerSet(1);
	TimerOn();
 24e:	3c df       	rcall	.-392    	; 0xc8 <TimerOn>
	sm_state = INIT;
 250:	10 92 0b 01 	sts	0x010B, r1
	while(1)
	{
		TickFct_part1();
 254:	99 df       	rcall	.-206    	; 0x188 <TickFct_part1>
		while(!TimerFlag);
 256:	80 91 0a 01 	lds	r24, 0x010A
 25a:	88 23       	and	r24, r24
 25c:	e1 f3       	breq	.-8      	; 0x256 <main+0x3e>
		TimerFlag = 0;
 25e:	10 92 0a 01 	sts	0x010A, r1
	}
 262:	f8 cf       	rjmp	.-16     	; 0x254 <main+0x3c>

00000264 <__divmodhi4>:
 264:	97 fb       	bst	r25, 7
 266:	07 2e       	mov	r0, r23
 268:	16 f4       	brtc	.+4      	; 0x26e <__divmodhi4+0xa>
 26a:	00 94       	com	r0
 26c:	06 d0       	rcall	.+12     	; 0x27a <__divmodhi4_neg1>
 26e:	77 fd       	sbrc	r23, 7
 270:	08 d0       	rcall	.+16     	; 0x282 <__divmodhi4_neg2>
 272:	0b d0       	rcall	.+22     	; 0x28a <__udivmodhi4>
 274:	07 fc       	sbrc	r0, 7
 276:	05 d0       	rcall	.+10     	; 0x282 <__divmodhi4_neg2>
 278:	3e f4       	brtc	.+14     	; 0x288 <__divmodhi4_exit>

0000027a <__divmodhi4_neg1>:
 27a:	90 95       	com	r25
 27c:	81 95       	neg	r24
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	08 95       	ret

00000282 <__divmodhi4_neg2>:
 282:	70 95       	com	r23
 284:	61 95       	neg	r22
 286:	7f 4f       	sbci	r23, 0xFF	; 255

00000288 <__divmodhi4_exit>:
 288:	08 95       	ret

0000028a <__udivmodhi4>:
 28a:	aa 1b       	sub	r26, r26
 28c:	bb 1b       	sub	r27, r27
 28e:	51 e1       	ldi	r21, 0x11	; 17
 290:	07 c0       	rjmp	.+14     	; 0x2a0 <__udivmodhi4_ep>

00000292 <__udivmodhi4_loop>:
 292:	aa 1f       	adc	r26, r26
 294:	bb 1f       	adc	r27, r27
 296:	a6 17       	cp	r26, r22
 298:	b7 07       	cpc	r27, r23
 29a:	10 f0       	brcs	.+4      	; 0x2a0 <__udivmodhi4_ep>
 29c:	a6 1b       	sub	r26, r22
 29e:	b7 0b       	sbc	r27, r23

000002a0 <__udivmodhi4_ep>:
 2a0:	88 1f       	adc	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	5a 95       	dec	r21
 2a6:	a9 f7       	brne	.-22     	; 0x292 <__udivmodhi4_loop>
 2a8:	80 95       	com	r24
 2aa:	90 95       	com	r25
 2ac:	bc 01       	movw	r22, r24
 2ae:	cd 01       	movw	r24, r26
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>

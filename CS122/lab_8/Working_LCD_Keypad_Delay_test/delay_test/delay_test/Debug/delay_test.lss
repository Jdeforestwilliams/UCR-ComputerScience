
delay_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000003e6  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800116  00800116  00000490  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a1  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000249  00000000  00000000  00000bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e9  00000000  00000000  00000e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000261  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000386  00000000  00000000  000016e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	11 c1       	rjmp	.+546    	; 0x258 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ee       	ldi	r30, 0xE6	; 230
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	06 d1       	rcall	.+524    	; 0x2d0 <main>
  c4:	8e c1       	rjmp	.+796    	; 0x3e2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <GetKeypadKey>:
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8f ee       	ldi	r24, 0xEF	; 239
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	00 00       	nop
  ce:	48 9b       	sbis	0x09, 0	; 9
  d0:	29 c0       	rjmp	.+82     	; 0x124 <GetKeypadKey+0x5c>
  d2:	49 9b       	sbis	0x09, 1	; 9
  d4:	29 c0       	rjmp	.+82     	; 0x128 <GetKeypadKey+0x60>
  d6:	4a 9b       	sbis	0x09, 2	; 9
  d8:	29 c0       	rjmp	.+82     	; 0x12c <GetKeypadKey+0x64>
  da:	4b 9b       	sbis	0x09, 3	; 9
  dc:	29 c0       	rjmp	.+82     	; 0x130 <GetKeypadKey+0x68>
  de:	8f ed       	ldi	r24, 0xDF	; 223
  e0:	8b b9       	out	0x0b, r24	; 11
  e2:	00 00       	nop
  e4:	48 9b       	sbis	0x09, 0	; 9
  e6:	26 c0       	rjmp	.+76     	; 0x134 <GetKeypadKey+0x6c>
  e8:	49 9b       	sbis	0x09, 1	; 9
  ea:	26 c0       	rjmp	.+76     	; 0x138 <GetKeypadKey+0x70>
  ec:	4a 9b       	sbis	0x09, 2	; 9
  ee:	26 c0       	rjmp	.+76     	; 0x13c <GetKeypadKey+0x74>
  f0:	4b 9b       	sbis	0x09, 3	; 9
  f2:	26 c0       	rjmp	.+76     	; 0x140 <GetKeypadKey+0x78>
  f4:	8f eb       	ldi	r24, 0xBF	; 191
  f6:	8b b9       	out	0x0b, r24	; 11
  f8:	00 00       	nop
  fa:	48 9b       	sbis	0x09, 0	; 9
  fc:	23 c0       	rjmp	.+70     	; 0x144 <GetKeypadKey+0x7c>
  fe:	49 9b       	sbis	0x09, 1	; 9
 100:	23 c0       	rjmp	.+70     	; 0x148 <GetKeypadKey+0x80>
 102:	4a 9b       	sbis	0x09, 2	; 9
 104:	23 c0       	rjmp	.+70     	; 0x14c <GetKeypadKey+0x84>
 106:	4b 9b       	sbis	0x09, 3	; 9
 108:	23 c0       	rjmp	.+70     	; 0x150 <GetKeypadKey+0x88>
 10a:	8f e7       	ldi	r24, 0x7F	; 127
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	00 00       	nop
 110:	48 9b       	sbis	0x09, 0	; 9
 112:	20 c0       	rjmp	.+64     	; 0x154 <GetKeypadKey+0x8c>
 114:	49 9b       	sbis	0x09, 1	; 9
 116:	20 c0       	rjmp	.+64     	; 0x158 <GetKeypadKey+0x90>
 118:	4a 9b       	sbis	0x09, 2	; 9
 11a:	20 c0       	rjmp	.+64     	; 0x15c <GetKeypadKey+0x94>
 11c:	4b 99       	sbic	0x09, 3	; 9
 11e:	20 c0       	rjmp	.+64     	; 0x160 <GetKeypadKey+0x98>
 120:	84 e4       	ldi	r24, 0x44	; 68
 122:	08 95       	ret
 124:	81 e3       	ldi	r24, 0x31	; 49
 126:	08 95       	ret
 128:	84 e3       	ldi	r24, 0x34	; 52
 12a:	08 95       	ret
 12c:	87 e3       	ldi	r24, 0x37	; 55
 12e:	08 95       	ret
 130:	8a e2       	ldi	r24, 0x2A	; 42
 132:	08 95       	ret
 134:	82 e3       	ldi	r24, 0x32	; 50
 136:	08 95       	ret
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	08 95       	ret
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	08 95       	ret
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	08 95       	ret
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	08 95       	ret
 148:	86 e3       	ldi	r24, 0x36	; 54
 14a:	08 95       	ret
 14c:	89 e3       	ldi	r24, 0x39	; 57
 14e:	08 95       	ret
 150:	83 e2       	ldi	r24, 0x23	; 35
 152:	08 95       	ret
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	08 95       	ret
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	08 95       	ret
 15c:	83 e4       	ldi	r24, 0x43	; 67
 15e:	08 95       	ret
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 95       	ret

00000164 <delay_ms>:
 164:	18 16       	cp	r1, r24
 166:	19 06       	cpc	r1, r25
 168:	9c f4       	brge	.+38     	; 0x190 <delay_ms+0x2c>
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	77 e0       	ldi	r23, 0x07	; 7
 170:	63 e0       	ldi	r22, 0x03	; 3
 172:	0b c0       	rjmp	.+22     	; 0x18a <delay_ms+0x26>
 174:	00 00       	nop
 176:	21 50       	subi	r18, 0x01	; 1
 178:	31 09       	sbc	r19, r1
 17a:	21 15       	cp	r18, r1
 17c:	31 05       	cpc	r19, r1
 17e:	d1 f7       	brne	.-12     	; 0x174 <delay_ms+0x10>
 180:	4f 5f       	subi	r20, 0xFF	; 255
 182:	5f 4f       	sbci	r21, 0xFF	; 255
 184:	48 17       	cp	r20, r24
 186:	59 07       	cpc	r21, r25
 188:	19 f0       	breq	.+6      	; 0x190 <delay_ms+0x2c>
 18a:	27 2f       	mov	r18, r23
 18c:	36 2f       	mov	r19, r22
 18e:	f2 cf       	rjmp	.-28     	; 0x174 <delay_ms+0x10>
 190:	08 95       	ret

00000192 <LCD_WriteCommand>:
 192:	28 98       	cbi	0x05, 0	; 5
 194:	88 b9       	out	0x08, r24	; 8
 196:	29 9a       	sbi	0x05, 1	; 5
 198:	00 00       	nop
 19a:	29 98       	cbi	0x05, 1	; 5
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	e1 cf       	rjmp	.-62     	; 0x164 <delay_ms>
 1a2:	08 95       	ret

000001a4 <LCD_init>:
 1a4:	84 e6       	ldi	r24, 0x64	; 100
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	dd df       	rcall	.-70     	; 0x164 <delay_ms>
 1aa:	88 e3       	ldi	r24, 0x38	; 56
 1ac:	f2 df       	rcall	.-28     	; 0x192 <LCD_WriteCommand>
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	f0 df       	rcall	.-32     	; 0x192 <LCD_WriteCommand>
 1b2:	8f e0       	ldi	r24, 0x0F	; 15
 1b4:	ee df       	rcall	.-36     	; 0x192 <LCD_WriteCommand>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	ec df       	rcall	.-40     	; 0x192 <LCD_WriteCommand>
 1ba:	8a e0       	ldi	r24, 0x0A	; 10
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	d2 cf       	rjmp	.-92     	; 0x164 <delay_ms>
 1c0:	08 95       	ret

000001c2 <LCD_WriteData>:
 1c2:	28 9a       	sbi	0x05, 0	; 5
 1c4:	88 b9       	out	0x08, r24	; 8
 1c6:	29 9a       	sbi	0x05, 1	; 5
 1c8:	00 00       	nop
 1ca:	29 98       	cbi	0x05, 1	; 5
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	c9 cf       	rjmp	.-110    	; 0x164 <delay_ms>
 1d2:	08 95       	ret

000001d4 <LCD_Cursor>:
 1d4:	81 31       	cpi	r24, 0x11	; 17
 1d6:	18 f4       	brcc	.+6      	; 0x1de <LCD_Cursor+0xa>
 1d8:	81 58       	subi	r24, 0x81	; 129
 1da:	db cf       	rjmp	.-74     	; 0x192 <LCD_WriteCommand>
 1dc:	08 95       	ret
 1de:	81 55       	subi	r24, 0x51	; 81
 1e0:	d8 cf       	rjmp	.-80     	; 0x192 <LCD_WriteCommand>
 1e2:	08 95       	ret

000001e4 <LCD_DisplayString>:
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	fb 01       	movw	r30, r22
 1ec:	90 81       	ld	r25, Z
 1ee:	99 23       	and	r25, r25
 1f0:	59 f0       	breq	.+22     	; 0x208 <LCD_DisplayString+0x24>
 1f2:	eb 01       	movw	r28, r22
 1f4:	11 e0       	ldi	r17, 0x01	; 1
 1f6:	18 0f       	add	r17, r24
 1f8:	ed df       	rcall	.-38     	; 0x1d4 <LCD_Cursor>
 1fa:	89 91       	ld	r24, Y+
 1fc:	e2 df       	rcall	.-60     	; 0x1c2 <LCD_WriteData>
 1fe:	88 81       	ld	r24, Y
 200:	88 23       	and	r24, r24
 202:	11 f0       	breq	.+4      	; 0x208 <LCD_DisplayString+0x24>
 204:	81 2f       	mov	r24, r17
 206:	f6 cf       	rjmp	.-20     	; 0x1f4 <LCD_DisplayString+0x10>
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	08 95       	ret

00000210 <TimerOn>:
 210:	8b e0       	ldi	r24, 0x0B	; 11
 212:	80 93 81 00 	sts	0x0081, r24
 216:	8d e7       	ldi	r24, 0x7D	; 125
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 89 00 	sts	0x0089, r25
 21e:	80 93 88 00 	sts	0x0088, r24
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	80 93 6f 00 	sts	0x006F, r24
 228:	10 92 85 00 	sts	0x0085, r1
 22c:	10 92 84 00 	sts	0x0084, r1
 230:	80 91 00 01 	lds	r24, 0x0100
 234:	90 91 01 01 	lds	r25, 0x0101
 238:	a0 91 02 01 	lds	r26, 0x0102
 23c:	b0 91 03 01 	lds	r27, 0x0103
 240:	80 93 16 01 	sts	0x0116, r24
 244:	90 93 17 01 	sts	0x0117, r25
 248:	a0 93 18 01 	sts	0x0118, r26
 24c:	b0 93 19 01 	sts	0x0119, r27
 250:	8f b7       	in	r24, 0x3f	; 63
 252:	80 68       	ori	r24, 0x80	; 128
 254:	8f bf       	out	0x3f, r24	; 63
 256:	08 95       	ret

00000258 <__vector_13>:
}

ISR(TIMER1_COMPA_vect)
{
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 26a:	80 91 16 01 	lds	r24, 0x0116
 26e:	90 91 17 01 	lds	r25, 0x0117
 272:	a0 91 18 01 	lds	r26, 0x0118
 276:	b0 91 19 01 	lds	r27, 0x0119
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	a1 09       	sbc	r26, r1
 27e:	b1 09       	sbc	r27, r1
 280:	80 93 16 01 	sts	0x0116, r24
 284:	90 93 17 01 	sts	0x0117, r25
 288:	a0 93 18 01 	sts	0x0118, r26
 28c:	b0 93 19 01 	sts	0x0119, r27
	if (_avr_timer_cntcurr == 0) {
 290:	89 2b       	or	r24, r25
 292:	8a 2b       	or	r24, r26
 294:	8b 2b       	or	r24, r27
 296:	99 f4       	brne	.+38     	; 0x2be <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 1a 01 	sts	0x011A, r24
ISR(TIMER1_COMPA_vect)
{
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 29e:	80 91 00 01 	lds	r24, 0x0100
 2a2:	90 91 01 01 	lds	r25, 0x0101
 2a6:	a0 91 02 01 	lds	r26, 0x0102
 2aa:	b0 91 03 01 	lds	r27, 0x0103
 2ae:	80 93 16 01 	sts	0x0116, r24
 2b2:	90 93 17 01 	sts	0x0117, r25
 2b6:	a0 93 18 01 	sts	0x0118, r26
 2ba:	b0 93 19 01 	sts	0x0119, r27
	}
}
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <main>:

int main(void)
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	66 97       	sbiw	r28, 0x16	; 22
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF; PORTC = 0x00; // Configure port A's 8 pins as inputs
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	87 b9       	out	0x07, r24	; 7
 2e8:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xF0; PORTD = 0x0F;
 2ea:	90 ef       	ldi	r25, 0xF0	; 240
 2ec:	9a b9       	out	0x0a, r25	; 10
 2ee:	9f e0       	ldi	r25, 0x0F	; 15
 2f0:	9b b9       	out	0x0b, r25	; 11
	DDRB = 0xFF; PORTB = 0x00;
 2f2:	84 b9       	out	0x04, r24	; 4
 2f4:	15 b8       	out	0x05, r1	; 5
	DDRA = 0xFF; PORTA = 0x00; 
 2f6:	81 b9       	out	0x01, r24	; 1
 2f8:	12 b8       	out	0x02, r1	; 2

unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 2fa:	84 e6       	ldi	r24, 0x64	; 100
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	a0 e0       	ldi	r26, 0x00	; 0
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	80 93 00 01 	sts	0x0100, r24
 306:	90 93 01 01 	sts	0x0101, r25
 30a:	a0 93 02 01 	sts	0x0102, r26
 30e:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 312:	80 93 16 01 	sts	0x0116, r24
 316:	90 93 17 01 	sts	0x0117, r25
 31a:	a0 93 18 01 	sts	0x0118, r26
 31e:	b0 93 19 01 	sts	0x0119, r27
	DDRD = 0xF0; PORTD = 0x0F;
	DDRB = 0xFF; PORTB = 0x00;
	DDRA = 0xFF; PORTA = 0x00; 

	TimerSet(100);
	TimerOn();
 322:	76 df       	rcall	.-276    	; 0x210 <TimerOn>
	LCD_init(); 
 324:	3f df       	rcall	.-386    	; 0x1a4 <LCD_init>
	unsigned char key_input; 
	unsigned char ptrn[] = "Ptrn: ";
 326:	87 e0       	ldi	r24, 0x07	; 7
 328:	e4 e0       	ldi	r30, 0x04	; 4
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	de 01       	movw	r26, r28
 32e:	11 96       	adiw	r26, 0x01	; 1
 330:	01 90       	ld	r0, Z+
 332:	0d 92       	st	X+, r0
 334:	8a 95       	dec	r24
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x60>
	unsigned char spd[] = "Spd: ";
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	eb e0       	ldi	r30, 0x0B	; 11
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	de 01       	movw	r26, r28
 340:	18 96       	adiw	r26, 0x08	; 8
 342:	01 90       	ld	r0, Z+
 344:	0d 92       	st	X+, r0
 346:	8a 95       	dec	r24
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x72>
	unsigned char uC[] = "uC: ";
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	e1 e1       	ldi	r30, 0x11	; 17
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	de 01       	movw	r26, r28
 352:	1e 96       	adiw	r26, 0x0e	; 14
 354:	01 90       	ld	r0, Z+
 356:	0d 92       	st	X+, r0
 358:	8a 95       	dec	r24
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0x84>
	unsigned char space[] = " ";
 35c:	80 e2       	ldi	r24, 0x20	; 32
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	9c 8b       	std	Y+20, r25	; 0x14
 362:	8b 8b       	std	Y+19, r24	; 0x13
	while(1)
	{
		key_input = GetKeypadKey();
		unsigned char data[2] = {key_input, 0x20};
 364:	68 94       	set
 366:	ff 24       	eor	r15, r15
 368:	f5 f8       	bld	r15, 5
		LCD_DisplayString(9, spd);
		LCD_DisplayString(14, data);//needs to be masked for pattern
		LCD_DisplayString(17, uC); 
		LCD_DisplayString(21, data);//needs to be masked for pattern
		for (int i = 15; i < 17; i++){
			LCD_DisplayString(i,space);
 36a:	07 e1       	ldi	r16, 0x17	; 23
	unsigned char spd[] = "Spd: ";
	unsigned char uC[] = "uC: ";
	unsigned char space[] = " ";
	while(1)
	{
		key_input = GetKeypadKey();
 36c:	ad de       	rcall	.-678    	; 0xc8 <GetKeypadKey>
		unsigned char data[2] = {key_input, 0x20};
 36e:	8d 8b       	std	Y+21, r24	; 0x15
 370:	fe 8a       	std	Y+22, r15	; 0x16
		LCD_DisplayString(1, ptrn);
 372:	be 01       	movw	r22, r28
 374:	6f 5f       	subi	r22, 0xFF	; 255
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	34 df       	rcall	.-408    	; 0x1e4 <LCD_DisplayString>
		LCD_DisplayString(7, data);	//needs to be masked for pattern
 37c:	be 01       	movw	r22, r28
 37e:	6b 5e       	subi	r22, 0xEB	; 235
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	87 e0       	ldi	r24, 0x07	; 7
 384:	2f df       	rcall	.-418    	; 0x1e4 <LCD_DisplayString>
		LCD_DisplayString(9, spd);
 386:	be 01       	movw	r22, r28
 388:	68 5f       	subi	r22, 0xF8	; 248
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	89 e0       	ldi	r24, 0x09	; 9
 38e:	2a df       	rcall	.-428    	; 0x1e4 <LCD_DisplayString>
		LCD_DisplayString(14, data);//needs to be masked for pattern
 390:	be 01       	movw	r22, r28
 392:	6b 5e       	subi	r22, 0xEB	; 235
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	8e e0       	ldi	r24, 0x0E	; 14
 398:	25 df       	rcall	.-438    	; 0x1e4 <LCD_DisplayString>
		LCD_DisplayString(17, uC); 
 39a:	be 01       	movw	r22, r28
 39c:	62 5f       	subi	r22, 0xF2	; 242
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	81 e1       	ldi	r24, 0x11	; 17
 3a2:	20 df       	rcall	.-448    	; 0x1e4 <LCD_DisplayString>
		LCD_DisplayString(21, data);//needs to be masked for pattern
 3a4:	be 01       	movw	r22, r28
 3a6:	6b 5e       	subi	r22, 0xEB	; 235
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	85 e1       	ldi	r24, 0x15	; 21
 3ac:	1b df       	rcall	.-458    	; 0x1e4 <LCD_DisplayString>
		for (int i = 15; i < 17; i++){
			LCD_DisplayString(i,space);
 3ae:	be 01       	movw	r22, r28
 3b0:	6d 5e       	subi	r22, 0xED	; 237
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	8f e0       	ldi	r24, 0x0F	; 15
 3b6:	16 df       	rcall	.-468    	; 0x1e4 <LCD_DisplayString>
 3b8:	be 01       	movw	r22, r28
 3ba:	6d 5e       	subi	r22, 0xED	; 237
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	80 e1       	ldi	r24, 0x10	; 16
 3c0:	11 df       	rcall	.-478    	; 0x1e4 <LCD_DisplayString>
 3c2:	10 2f       	mov	r17, r16
		}
		for (int i = 23; i < 33; i++){
			LCD_DisplayString(i,space);
 3c4:	be 01       	movw	r22, r28
 3c6:	6d 5e       	subi	r22, 0xED	; 237
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	81 2f       	mov	r24, r17
 3cc:	0b df       	rcall	.-490    	; 0x1e4 <LCD_DisplayString>
 3ce:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_DisplayString(17, uC); 
		LCD_DisplayString(21, data);//needs to be masked for pattern
		for (int i = 15; i < 17; i++){
			LCD_DisplayString(i,space);
		}
		for (int i = 23; i < 33; i++){
 3d0:	11 32       	cpi	r17, 0x21	; 33
 3d2:	c1 f7       	brne	.-16     	; 0x3c4 <main+0xf4>
			LCD_DisplayString(i,space);
		}
		//LCD_DisplayString(7, string4);		
		while(!TimerFlag);
 3d4:	80 91 1a 01 	lds	r24, 0x011A
 3d8:	88 23       	and	r24, r24
 3da:	e1 f3       	breq	.-8      	; 0x3d4 <main+0x104>
		TimerFlag = 0;
 3dc:	10 92 1a 01 	sts	0x011A, r1
	}
 3e0:	c5 cf       	rjmp	.-118    	; 0x36c <main+0x9c>

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>

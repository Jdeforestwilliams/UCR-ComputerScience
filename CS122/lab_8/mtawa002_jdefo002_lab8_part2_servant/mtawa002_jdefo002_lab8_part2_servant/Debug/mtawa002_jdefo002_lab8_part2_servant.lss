
mtawa002_jdefo002_lab8_part2_servant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800110  00800110  000005da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000044b  00000000  00000000  00000692  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000202  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063d  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fc  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000155  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001891  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5a c0       	rjmp	.+180    	; 0xb6 <__ctors_end>
   2:	00 00       	nop
   4:	75 c0       	rjmp	.+234    	; 0xf0 <__bad_interrupt>
   6:	00 00       	nop
   8:	73 c0       	rjmp	.+230    	; 0xf0 <__bad_interrupt>
   a:	00 00       	nop
   c:	71 c0       	rjmp	.+226    	; 0xf0 <__bad_interrupt>
   e:	00 00       	nop
  10:	6f c0       	rjmp	.+222    	; 0xf0 <__bad_interrupt>
  12:	00 00       	nop
  14:	6d c0       	rjmp	.+218    	; 0xf0 <__bad_interrupt>
  16:	00 00       	nop
  18:	6b c0       	rjmp	.+214    	; 0xf0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	69 c0       	rjmp	.+210    	; 0xf0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	67 c0       	rjmp	.+206    	; 0xf0 <__bad_interrupt>
  22:	00 00       	nop
  24:	65 c0       	rjmp	.+202    	; 0xf0 <__bad_interrupt>
  26:	00 00       	nop
  28:	63 c0       	rjmp	.+198    	; 0xf0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	61 c0       	rjmp	.+194    	; 0xf0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5f c0       	rjmp	.+190    	; 0xf0 <__bad_interrupt>
  32:	00 00       	nop
  34:	98 c0       	rjmp	.+304    	; 0x166 <__vector_13>
  36:	00 00       	nop
  38:	5b c0       	rjmp	.+182    	; 0xf0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	59 c0       	rjmp	.+178    	; 0xf0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	57 c0       	rjmp	.+174    	; 0xf0 <__bad_interrupt>
  42:	00 00       	nop
  44:	55 c0       	rjmp	.+170    	; 0xf0 <__bad_interrupt>
  46:	00 00       	nop
  48:	53 c0       	rjmp	.+166    	; 0xf0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	59 c0       	rjmp	.+178    	; 0x100 <__vector_19>
  4e:	00 00       	nop
  50:	4f c0       	rjmp	.+158    	; 0xf0 <__bad_interrupt>
  52:	00 00       	nop
  54:	4d c0       	rjmp	.+154    	; 0xf0 <__bad_interrupt>
  56:	00 00       	nop
  58:	4b c0       	rjmp	.+150    	; 0xf0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	49 c0       	rjmp	.+146    	; 0xf0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	47 c0       	rjmp	.+142    	; 0xf0 <__bad_interrupt>
  62:	00 00       	nop
  64:	45 c0       	rjmp	.+138    	; 0xf0 <__bad_interrupt>
  66:	00 00       	nop
  68:	43 c0       	rjmp	.+134    	; 0xf0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	41 c0       	rjmp	.+130    	; 0xf0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3f c0       	rjmp	.+126    	; 0xf0 <__bad_interrupt>
  72:	00 00       	nop
  74:	3d c0       	rjmp	.+122    	; 0xf0 <__bad_interrupt>
  76:	00 00       	nop
  78:	3b c0       	rjmp	.+118    	; 0xf0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	39 c0       	rjmp	.+114    	; 0xf0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	37 c0       	rjmp	.+110    	; 0xf0 <__bad_interrupt>
  82:	00 00       	nop
  84:	35 c0       	rjmp	.+106    	; 0xf0 <__bad_interrupt>
  86:	00 00       	nop
  88:	33 c0       	rjmp	.+102    	; 0xf0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	fa 00       	.word	0x00fa	; ????
  8e:	fe 00       	.word	0x00fe	; ????
  90:	0f 01       	movw	r0, r30
  92:	41 01       	movw	r8, r2
  94:	51 01       	movw	r10, r2
  96:	6c 01       	movw	r12, r24
  98:	7c 01       	movw	r14, r24
  9a:	97 01       	movw	r18, r14
  9c:	a7 01       	movw	r20, r14
  9e:	c0 01       	movw	r24, r0
  a0:	d0 01       	movw	r26, r0
  a2:	fa 01       	movw	r30, r20
  a4:	01 02       	muls	r16, r17
  a6:	04 02       	muls	r16, r20
  a8:	16 02       	muls	r17, r22
  aa:	1e 02       	muls	r17, r30
  ac:	30 02       	muls	r19, r16
  ae:	38 02       	muls	r19, r24
  b0:	49 02       	muls	r20, r25
  b2:	51 02       	muls	r21, r17
  b4:	63 02       	muls	r22, r19

000000b6 <__ctors_end>:
  b6:	11 24       	eor	r1, r1
  b8:	1f be       	out	0x3f, r1	; 63
  ba:	cf ef       	ldi	r28, 0xFF	; 255
  bc:	d0 e4       	ldi	r29, 0x40	; 64
  be:	de bf       	out	0x3e, r29	; 62
  c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
  c2:	11 e0       	ldi	r17, 0x01	; 1
  c4:	a0 e0       	ldi	r26, 0x00	; 0
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	e6 e3       	ldi	r30, 0x36	; 54
  ca:	f5 e0       	ldi	r31, 0x05	; 5
  cc:	00 e0       	ldi	r16, 0x00	; 0
  ce:	0b bf       	out	0x3b, r16	; 59
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x14>
  d2:	07 90       	elpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a0 31       	cpi	r26, 0x10	; 16
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0x10>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a0 e1       	ldi	r26, 0x10	; 16
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	ad 31       	cpi	r26, 0x1D	; 29
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
  ec:	f7 d1       	rcall	.+1006   	; 0x4dc <main>
  ee:	21 c2       	rjmp	.+1090   	; 0x532 <_exit>

000000f0 <__bad_interrupt>:
  f0:	87 cf       	rjmp	.-242    	; 0x0 <__vectors>

000000f2 <SPI_ServantInit>:
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	84 b9       	out	0x04, r24	; 4
  f6:	80 eb       	ldi	r24, 0xB0	; 176
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	80 ec       	ldi	r24, 0xC0	; 192
  fc:	8c bd       	out	0x2c, r24	; 44
  fe:	08 95       	ret

00000100 <__vector_19>:
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	8e b5       	in	r24, 0x2e	; 46
 10e:	80 93 1b 01 	sts	0x011B, r24
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <TimerOn>:
 11e:	8b e0       	ldi	r24, 0x0B	; 11
 120:	80 93 81 00 	sts	0x0081, r24
 124:	8d e7       	ldi	r24, 0x7D	; 125
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 89 00 	sts	0x0089, r25
 12c:	80 93 88 00 	sts	0x0088, r24
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	80 93 6f 00 	sts	0x006F, r24
 136:	10 92 85 00 	sts	0x0085, r1
 13a:	10 92 84 00 	sts	0x0084, r1
 13e:	80 91 0c 01 	lds	r24, 0x010C
 142:	90 91 0d 01 	lds	r25, 0x010D
 146:	a0 91 0e 01 	lds	r26, 0x010E
 14a:	b0 91 0f 01 	lds	r27, 0x010F
 14e:	80 93 16 01 	sts	0x0116, r24
 152:	90 93 17 01 	sts	0x0117, r25
 156:	a0 93 18 01 	sts	0x0118, r26
 15a:	b0 93 19 01 	sts	0x0119, r27
 15e:	8f b7       	in	r24, 0x3f	; 63
 160:	80 68       	ori	r24, 0x80	; 128
 162:	8f bf       	out	0x3f, r24	; 63
 164:	08 95       	ret

00000166 <__vector_13>:
}

ISR(TIMER1_COMPA_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 178:	80 91 16 01 	lds	r24, 0x0116
 17c:	90 91 17 01 	lds	r25, 0x0117
 180:	a0 91 18 01 	lds	r26, 0x0118
 184:	b0 91 19 01 	lds	r27, 0x0119
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	a1 09       	sbc	r26, r1
 18c:	b1 09       	sbc	r27, r1
 18e:	80 93 16 01 	sts	0x0116, r24
 192:	90 93 17 01 	sts	0x0117, r25
 196:	a0 93 18 01 	sts	0x0118, r26
 19a:	b0 93 19 01 	sts	0x0119, r27
	if (_avr_timer_cntcurr == 0) {
 19e:	89 2b       	or	r24, r25
 1a0:	8a 2b       	or	r24, r26
 1a2:	8b 2b       	or	r24, r27
 1a4:	99 f4       	brne	.+38     	; 0x1cc <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 1a 01 	sts	0x011A, r24
ISR(TIMER1_COMPA_vect)
{
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 1ac:	80 91 0c 01 	lds	r24, 0x010C
 1b0:	90 91 0d 01 	lds	r25, 0x010D
 1b4:	a0 91 0e 01 	lds	r26, 0x010E
 1b8:	b0 91 0f 01 	lds	r27, 0x010F
 1bc:	80 93 16 01 	sts	0x0116, r24
 1c0:	90 93 17 01 	sts	0x0117, r25
 1c4:	a0 93 18 01 	sts	0x0118, r26
 1c8:	b0 93 19 01 	sts	0x0119, r27
	}
}
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <TickFct_part2>:
unsigned char i = 0;
enum SM_States{INIT, wait_data, decision, bpt1_on, bpt1_off, bpt2_on, bpt2_off, bpt3_on, bpt3_off, bpt4_on, bpt4_off}sm_state;

void TickFct_part2(){
//	rcv = receivedData;
	 switch(sm_state){
 1de:	80 91 1c 01 	lds	r24, 0x011C
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	8b 30       	cpi	r24, 0x0B	; 11
 1e6:	91 05       	cpc	r25, r1
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <TickFct_part2+0xe>
 1ea:	f5 c0       	rjmp	.+490    	; 0x3d6 <TickFct_part2+0x1f8>
 1ec:	fc 01       	movw	r30, r24
 1ee:	ea 5b       	subi	r30, 0xBA	; 186
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	99 c1       	rjmp	.+818    	; 0x526 <__tablejump2__>
		 case INIT:
			sm_state = wait_data;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 1c 01 	sts	0x011C, r24
			break;
 1fa:	fc c0       	rjmp	.+504    	; 0x3f4 <TickFct_part2+0x216>
		case wait_data:
			if(rcv == 0){
 1fc:	80 91 13 01 	lds	r24, 0x0113
 200:	88 23       	and	r24, r24
 202:	09 f4       	brne	.+2      	; 0x206 <TickFct_part2+0x28>
 204:	f7 c0       	rjmp	.+494    	; 0x3f4 <TickFct_part2+0x216>
				sm_state = wait_data;
			} else{
				sm_state = decision;
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	90 93 1c 01 	sts	0x011C, r25
				spd = rcv & 0x0F;
 20c:	98 2f       	mov	r25, r24
 20e:	9f 70       	andi	r25, 0x0F	; 15
 210:	90 93 15 01 	sts	0x0115, r25
				pttrn = (rcv & 0xF0) >> 4;
 214:	82 95       	swap	r24
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	80 93 14 01 	sts	0x0114, r24
 21c:	df c0       	rjmp	.+446    	; 0x3dc <TickFct_part2+0x1fe>
			}
			break;
		case decision:
			if(rcv != receivedData || pttrn == 0){
 21e:	90 91 13 01 	lds	r25, 0x0113
 222:	80 91 1b 01 	lds	r24, 0x011B
 226:	98 13       	cpse	r25, r24
 228:	04 c0       	rjmp	.+8      	; 0x232 <TickFct_part2+0x54>
 22a:	80 91 14 01 	lds	r24, 0x0114
 22e:	81 11       	cpse	r24, r1
 230:	04 c0       	rjmp	.+8      	; 0x23a <TickFct_part2+0x5c>
				sm_state = wait_data;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 1c 01 	sts	0x011C, r24
 238:	dd c0       	rjmp	.+442    	; 0x3f4 <TickFct_part2+0x216>
			}else if(rcv == receivedData && pttrn == 1){
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	31 f4       	brne	.+12     	; 0x24a <TickFct_part2+0x6c>
				cnt = 0;
 23e:	10 92 11 01 	sts	0x0111, r1
				sm_state = bpt1_on;
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	80 93 1c 01 	sts	0x011C, r24
 248:	df c0       	rjmp	.+446    	; 0x408 <TickFct_part2+0x22a>
			}else if(rcv == receivedData && pttrn == 2){		
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	31 f4       	brne	.+12     	; 0x25a <TickFct_part2+0x7c>
				cnt = 0;
 24e:	10 92 11 01 	sts	0x0111, r1
				sm_state = bpt2_on;
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	80 93 1c 01 	sts	0x011C, r24
 258:	f1 c0       	rjmp	.+482    	; 0x43c <TickFct_part2+0x25e>
			}else if(rcv == receivedData && pttrn == 3){
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	49 f4       	brne	.+18     	; 0x270 <TickFct_part2+0x92>
				seq = 0x80;
 25e:	80 e8       	ldi	r24, 0x80	; 128
 260:	80 93 12 01 	sts	0x0112, r24
				cnt = 0;
 264:	10 92 11 01 	sts	0x0111, r1
				sm_state = bpt3_on;
 268:	87 e0       	ldi	r24, 0x07	; 7
 26a:	80 93 1c 01 	sts	0x011C, r24
 26e:	00 c1       	rjmp	.+512    	; 0x470 <TickFct_part2+0x292>
			}else if(rcv == receivedData && pttrn == 4){
 270:	84 30       	cpi	r24, 0x04	; 4
 272:	09 f0       	breq	.+2      	; 0x276 <TickFct_part2+0x98>
 274:	c6 c0       	rjmp	.+396    	; 0x402 <TickFct_part2+0x224>
				cnt = 0;
 276:	10 92 11 01 	sts	0x0111, r1
				sm_state = bpt4_on;
 27a:	89 e0       	ldi	r24, 0x09	; 9
 27c:	80 93 1c 01 	sts	0x011C, r24
 280:	10 c1       	rjmp	.+544    	; 0x4a2 <TickFct_part2+0x2c4>
			}
			break;
		case bpt1_on:
			if(rcv != receivedData){
 282:	90 91 13 01 	lds	r25, 0x0113
 286:	80 91 1b 01 	lds	r24, 0x011B
 28a:	98 17       	cp	r25, r24
 28c:	21 f0       	breq	.+8      	; 0x296 <TickFct_part2+0xb8>
				sm_state = wait_data;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 1c 01 	sts	0x011C, r24
 294:	af c0       	rjmp	.+350    	; 0x3f4 <TickFct_part2+0x216>
			}else{
				sm_state = bpt1_off;
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	80 93 1c 01 	sts	0x011C, r24
				cnt = 0;
 29c:	10 92 11 01 	sts	0x0111, r1
 2a0:	9d c0       	rjmp	.+314    	; 0x3dc <TickFct_part2+0x1fe>
			}
			break;
		case bpt1_off:
			if(rcv != receivedData){
 2a2:	90 91 13 01 	lds	r25, 0x0113
 2a6:	80 91 1b 01 	lds	r24, 0x011B
 2aa:	98 17       	cp	r25, r24
 2ac:	21 f0       	breq	.+8      	; 0x2b6 <TickFct_part2+0xd8>
				sm_state = wait_data;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 1c 01 	sts	0x011C, r24
 2b4:	9f c0       	rjmp	.+318    	; 0x3f4 <TickFct_part2+0x216>
			}else if(cnt < speeds[spd] && rcv == receivedData){
 2b6:	e0 91 15 01 	lds	r30, 0x0115
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	ea 5f       	subi	r30, 0xFA	; 250
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	90 81       	ld	r25, Z
 2c2:	80 91 11 01 	lds	r24, 0x0111
 2c6:	89 17       	cp	r24, r25
 2c8:	08 f4       	brcc	.+2      	; 0x2cc <TickFct_part2+0xee>
 2ca:	b0 c0       	rjmp	.+352    	; 0x42c <TickFct_part2+0x24e>
				sm_state = bpt1_off;
			}else if(cnt >= speeds[spd] && rcv == receivedData){
				sm_state = bpt1_on;
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	80 93 1c 01 	sts	0x011C, r24
				cnt = 0;
 2d2:	10 92 11 01 	sts	0x0111, r1
 2d6:	82 c0       	rjmp	.+260    	; 0x3dc <TickFct_part2+0x1fe>
			}
			break;
		case bpt2_on:
			if(rcv != receivedData){
 2d8:	90 91 13 01 	lds	r25, 0x0113
 2dc:	80 91 1b 01 	lds	r24, 0x011B
 2e0:	98 17       	cp	r25, r24
 2e2:	21 f0       	breq	.+8      	; 0x2ec <TickFct_part2+0x10e>
				sm_state = wait_data;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 1c 01 	sts	0x011C, r24
 2ea:	84 c0       	rjmp	.+264    	; 0x3f4 <TickFct_part2+0x216>
			}else {
				sm_state = bpt2_off;
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	80 93 1c 01 	sts	0x011C, r24
				cnt = 0;
 2f2:	10 92 11 01 	sts	0x0111, r1
 2f6:	72 c0       	rjmp	.+228    	; 0x3dc <TickFct_part2+0x1fe>
			}
			break;
		case bpt2_off:
			if(rcv != receivedData){
 2f8:	90 91 13 01 	lds	r25, 0x0113
 2fc:	80 91 1b 01 	lds	r24, 0x011B
 300:	98 17       	cp	r25, r24
 302:	21 f0       	breq	.+8      	; 0x30c <TickFct_part2+0x12e>
				sm_state = wait_data;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 1c 01 	sts	0x011C, r24
 30a:	74 c0       	rjmp	.+232    	; 0x3f4 <TickFct_part2+0x216>
			}else if(cnt < speeds[spd] && rcv == receivedData){
 30c:	e0 91 15 01 	lds	r30, 0x0115
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	ea 5f       	subi	r30, 0xFA	; 250
 314:	fe 4f       	sbci	r31, 0xFE	; 254
 316:	90 81       	ld	r25, Z
 318:	80 91 11 01 	lds	r24, 0x0111
 31c:	89 17       	cp	r24, r25
 31e:	08 f4       	brcc	.+2      	; 0x322 <TickFct_part2+0x144>
 320:	9f c0       	rjmp	.+318    	; 0x460 <TickFct_part2+0x282>
				sm_state = bpt2_off;
			}else if(cnt >= speeds[spd] && rcv == receivedData){
				sm_state = bpt2_on;
 322:	85 e0       	ldi	r24, 0x05	; 5
 324:	80 93 1c 01 	sts	0x011C, r24
				cnt = 0;
 328:	10 92 11 01 	sts	0x0111, r1
 32c:	57 c0       	rjmp	.+174    	; 0x3dc <TickFct_part2+0x1fe>
			}
			break;
		case bpt3_on:
			if(rcv != receivedData){
 32e:	90 91 13 01 	lds	r25, 0x0113
 332:	80 91 1b 01 	lds	r24, 0x011B
 336:	98 17       	cp	r25, r24
 338:	21 f0       	breq	.+8      	; 0x342 <TickFct_part2+0x164>
				sm_state = wait_data;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	80 93 1c 01 	sts	0x011C, r24
 340:	59 c0       	rjmp	.+178    	; 0x3f4 <TickFct_part2+0x216>
			}else {
				sm_state = bpt3_off;
 342:	88 e0       	ldi	r24, 0x08	; 8
 344:	80 93 1c 01 	sts	0x011C, r24
				cnt = 0;
 348:	10 92 11 01 	sts	0x0111, r1
 34c:	47 c0       	rjmp	.+142    	; 0x3dc <TickFct_part2+0x1fe>
			}
			break;
		case bpt3_off:
			if(rcv != receivedData){
 34e:	90 91 13 01 	lds	r25, 0x0113
 352:	80 91 1b 01 	lds	r24, 0x011B
 356:	98 17       	cp	r25, r24
 358:	21 f0       	breq	.+8      	; 0x362 <TickFct_part2+0x184>
				sm_state = wait_data;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 1c 01 	sts	0x011C, r24
 360:	49 c0       	rjmp	.+146    	; 0x3f4 <TickFct_part2+0x216>
			}else if(cnt < speeds[spd] && rcv == receivedData){
 362:	e0 91 15 01 	lds	r30, 0x0115
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	ea 5f       	subi	r30, 0xFA	; 250
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
 36c:	90 81       	ld	r25, Z
 36e:	80 91 11 01 	lds	r24, 0x0111
 372:	89 17       	cp	r24, r25
 374:	08 f4       	brcc	.+2      	; 0x378 <TickFct_part2+0x19a>
 376:	8d c0       	rjmp	.+282    	; 0x492 <TickFct_part2+0x2b4>
				sm_state = bpt3_off;
			}else if(cnt >= speeds[spd] && rcv == receivedData){
				sm_state = bpt3_on;
 378:	87 e0       	ldi	r24, 0x07	; 7
 37a:	80 93 1c 01 	sts	0x011C, r24
 37e:	78 c0       	rjmp	.+240    	; 0x470 <TickFct_part2+0x292>
			}
			break;
		case bpt4_on:
			if(rcv != receivedData){
 380:	90 91 13 01 	lds	r25, 0x0113
 384:	80 91 1b 01 	lds	r24, 0x011B
 388:	98 17       	cp	r25, r24
 38a:	21 f0       	breq	.+8      	; 0x394 <TickFct_part2+0x1b6>
				sm_state = wait_data;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 1c 01 	sts	0x011C, r24
 392:	30 c0       	rjmp	.+96     	; 0x3f4 <TickFct_part2+0x216>
			}else {
				sm_state = bpt4_off;
 394:	8a e0       	ldi	r24, 0x0A	; 10
 396:	80 93 1c 01 	sts	0x011C, r24
				cnt = 0;
 39a:	10 92 11 01 	sts	0x0111, r1
 39e:	1e c0       	rjmp	.+60     	; 0x3dc <TickFct_part2+0x1fe>
			}
			break;
		case bpt4_off:
			if(rcv != receivedData){
 3a0:	90 91 13 01 	lds	r25, 0x0113
 3a4:	80 91 1b 01 	lds	r24, 0x011B
 3a8:	98 17       	cp	r25, r24
 3aa:	21 f0       	breq	.+8      	; 0x3b4 <TickFct_part2+0x1d6>
				sm_state = wait_data;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 1c 01 	sts	0x011C, r24
 3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <TickFct_part2+0x216>
			}else if(cnt < speeds[spd] && rcv == receivedData){
 3b4:	e0 91 15 01 	lds	r30, 0x0115
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	ea 5f       	subi	r30, 0xFA	; 250
 3bc:	fe 4f       	sbci	r31, 0xFE	; 254
 3be:	90 81       	ld	r25, Z
 3c0:	80 91 11 01 	lds	r24, 0x0111
 3c4:	89 17       	cp	r24, r25
 3c6:	08 f4       	brcc	.+2      	; 0x3ca <TickFct_part2+0x1ec>
 3c8:	7e c0       	rjmp	.+252    	; 0x4c6 <TickFct_part2+0x2e8>
				sm_state = bpt4_off;
			}else if(cnt >= speeds[spd] && rcv == receivedData){
				sm_state = bpt4_on;
 3ca:	89 e0       	ldi	r24, 0x09	; 9
 3cc:	80 93 1c 01 	sts	0x011C, r24
				cnt = 0;
 3d0:	10 92 11 01 	sts	0x0111, r1
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <TickFct_part2+0x1fe>
			}
		break;
		default:
			sm_state = INIT;
 3d6:	10 92 1c 01 	sts	0x011C, r1
 3da:	7d c0       	rjmp	.+250    	; 0x4d6 <TickFct_part2+0x2f8>
			break;
	 }
	 
	 switch(sm_state){
 3dc:	80 91 1c 01 	lds	r24, 0x011C
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	fc 01       	movw	r30, r24
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	ea 30       	cpi	r30, 0x0A	; 10
 3e8:	f1 05       	cpc	r31, r1
 3ea:	08 f0       	brcs	.+2      	; 0x3ee <TickFct_part2+0x210>
 3ec:	74 c0       	rjmp	.+232    	; 0x4d6 <TickFct_part2+0x2f8>
 3ee:	ef 5a       	subi	r30, 0xAF	; 175
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	99 c0       	rjmp	.+306    	; 0x526 <__tablejump2__>
		 case wait_data:
			rcv = receivedData;
 3f4:	80 91 1b 01 	lds	r24, 0x011B
 3f8:	80 93 13 01 	sts	0x0113, r24
			PORTD = 0x01; 
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	8b b9       	out	0x0b, r24	; 11
			break;
 400:	08 95       	ret
		case decision:
			PORTD = 0x02;
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	8b b9       	out	0x0b, r24	; 11
			break;
 406:	08 95       	ret
		case bpt1_on:
			PORTA = A[i%2];
 408:	80 91 10 01 	lds	r24, 0x0110
 40c:	68 2f       	mov	r22, r24
 40e:	61 70       	andi	r22, 0x01	; 1
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	fb 01       	movw	r30, r22
 414:	ec 5f       	subi	r30, 0xFC	; 252
 416:	fe 4f       	sbci	r31, 0xFE	; 254
 418:	80 81       	ld	r24, Z
 41a:	82 b9       	out	0x02, r24	; 2
			i++;
 41c:	80 91 10 01 	lds	r24, 0x0110
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	80 93 10 01 	sts	0x0110, r24
			PORTD = 0x03;
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	8b b9       	out	0x0b, r24	; 11
			break;
 42a:	08 95       	ret
		case bpt1_off:
			cnt++;
 42c:	80 91 11 01 	lds	r24, 0x0111
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	80 93 11 01 	sts	0x0111, r24
			PORTD = 0x04;
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	8b b9       	out	0x0b, r24	; 11
			break;
 43a:	08 95       	ret
		case bpt2_on:
			PORTA = B[i%2];
 43c:	80 91 10 01 	lds	r24, 0x0110
 440:	48 2f       	mov	r20, r24
 442:	41 70       	andi	r20, 0x01	; 1
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	fa 01       	movw	r30, r20
 448:	ee 5f       	subi	r30, 0xFE	; 254
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	80 81       	ld	r24, Z
 44e:	82 b9       	out	0x02, r24	; 2
			i++;
 450:	80 91 10 01 	lds	r24, 0x0110
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	80 93 10 01 	sts	0x0110, r24
			PORTD = 0x05;
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	8b b9       	out	0x0b, r24	; 11
			break;
 45e:	08 95       	ret
		case bpt2_off:			
			cnt++;
 460:	80 91 11 01 	lds	r24, 0x0111
 464:	8f 5f       	subi	r24, 0xFF	; 255
 466:	80 93 11 01 	sts	0x0111, r24
			PORTD = 0x06;
 46a:	86 e0       	ldi	r24, 0x06	; 6
 46c:	8b b9       	out	0x0b, r24	; 11
			break;
 46e:	08 95       	ret
		case bpt3_on:
			PORTA = seq;
 470:	80 91 12 01 	lds	r24, 0x0112
 474:	82 b9       	out	0x02, r24	; 2
			if(seq == 0x01) seq = 0x80;
 476:	80 91 12 01 	lds	r24, 0x0112
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	21 f4       	brne	.+8      	; 0x486 <TickFct_part2+0x2a8>
 47e:	80 e8       	ldi	r24, 0x80	; 128
 480:	80 93 12 01 	sts	0x0112, r24
 484:	03 c0       	rjmp	.+6      	; 0x48c <TickFct_part2+0x2ae>
			else seq = seq >> 1;
 486:	86 95       	lsr	r24
 488:	80 93 12 01 	sts	0x0112, r24
			PORTD = 0x07;
 48c:	87 e0       	ldi	r24, 0x07	; 7
 48e:	8b b9       	out	0x0b, r24	; 11
			break;
 490:	08 95       	ret
		case bpt3_off:
			cnt++;
 492:	80 91 11 01 	lds	r24, 0x0111
 496:	8f 5f       	subi	r24, 0xFF	; 255
 498:	80 93 11 01 	sts	0x0111, r24
			PORTD = 0x08;
 49c:	88 e0       	ldi	r24, 0x08	; 8
 49e:	8b b9       	out	0x0b, r24	; 11
			break;
 4a0:	08 95       	ret
		case bpt4_on:
			PORTA = D[i%2];
 4a2:	80 91 10 01 	lds	r24, 0x0110
 4a6:	28 2f       	mov	r18, r24
 4a8:	21 70       	andi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	f9 01       	movw	r30, r18
 4ae:	e0 50       	subi	r30, 0x00	; 0
 4b0:	ff 4f       	sbci	r31, 0xFF	; 255
 4b2:	80 81       	ld	r24, Z
 4b4:	82 b9       	out	0x02, r24	; 2
			i++;
 4b6:	80 91 10 01 	lds	r24, 0x0110
 4ba:	8f 5f       	subi	r24, 0xFF	; 255
 4bc:	80 93 10 01 	sts	0x0110, r24
			PORTD = 0x09;
 4c0:	89 e0       	ldi	r24, 0x09	; 9
 4c2:	8b b9       	out	0x0b, r24	; 11
			break;
 4c4:	08 95       	ret
		case bpt4_off:
			cnt++;
 4c6:	80 91 11 01 	lds	r24, 0x0111
 4ca:	8f 5f       	subi	r24, 0xFF	; 255
 4cc:	80 93 11 01 	sts	0x0111, r24
			PORTD = 0x0A;
 4d0:	8a e0       	ldi	r24, 0x0A	; 10
 4d2:	8b b9       	out	0x0b, r24	; 11
			break;
 4d4:	08 95       	ret
		default:
			PORTD = 0x0B;
 4d6:	8b e0       	ldi	r24, 0x0B	; 11
 4d8:	8b b9       	out	0x0b, r24	; 11
 4da:	08 95       	ret

000004dc <main>:
	 }
}

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	81 b9       	out	0x01, r24	; 1
 4e0:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF; PORTD = 0x00; 
 4e2:	8a b9       	out	0x0a, r24	; 10
 4e4:	1b b8       	out	0x0b, r1	; 11
	TimerOn();
 4e6:	1b de       	rcall	.-970    	; 0x11e <TimerOn>

unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 4e8:	82 e3       	ldi	r24, 0x32	; 50
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	a0 e0       	ldi	r26, 0x00	; 0
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	80 93 0c 01 	sts	0x010C, r24
 4f4:	90 93 0d 01 	sts	0x010D, r25
 4f8:	a0 93 0e 01 	sts	0x010E, r26
 4fc:	b0 93 0f 01 	sts	0x010F, r27
	_avr_timer_cntcurr = _avr_timer_M;
 500:	80 93 16 01 	sts	0x0116, r24
 504:	90 93 17 01 	sts	0x0117, r25
 508:	a0 93 18 01 	sts	0x0118, r26
 50c:	b0 93 19 01 	sts	0x0119, r27
{
	DDRA = 0xFF; PORTA = 0x00;
	DDRD = 0xFF; PORTD = 0x00; 
	TimerOn();
	TimerSet(50);
	SPI_ServantInit();
 510:	f0 dd       	rcall	.-1056   	; 0xf2 <SPI_ServantInit>
	while(1)
	{
		PORTD = 0x0F;  
 512:	cf e0       	ldi	r28, 0x0F	; 15
 514:	cb b9       	out	0x0b, r28	; 11
		TickFct_part2();
 516:	63 de       	rcall	.-826    	; 0x1de <TickFct_part2>
		while(!TimerFlag);
 518:	80 91 1a 01 	lds	r24, 0x011A
 51c:	88 23       	and	r24, r24
 51e:	e1 f3       	breq	.-8      	; 0x518 <main+0x3c>
		TimerFlag = 0;
 520:	10 92 1a 01 	sts	0x011A, r1
	}
 524:	f7 cf       	rjmp	.-18     	; 0x514 <main+0x38>

00000526 <__tablejump2__>:
 526:	ee 0f       	add	r30, r30
 528:	ff 1f       	adc	r31, r31

0000052a <__tablejump__>:
 52a:	05 90       	lpm	r0, Z+
 52c:	f4 91       	lpm	r31, Z
 52e:	e0 2d       	mov	r30, r0
 530:	09 94       	ijmp

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>

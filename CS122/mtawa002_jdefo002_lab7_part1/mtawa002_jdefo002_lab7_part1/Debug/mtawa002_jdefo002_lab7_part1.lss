
mtawa002_jdefo002_lab7_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003fb  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f1  00000000  00000000  00000823  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000415  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000284  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ff  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000013c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c2 c0       	rjmp	.+388    	; 0x1ba <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e2 d0       	rcall	.+452    	; 0x288 <main>
  c4:	07 c1       	rjmp	.+526    	; 0x2d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR()  {
	TimerFlag = 1;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24
  e6:	10 92 c5 00 	sts	0x00C5, r1
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24
 106:	10 92 cd 00 	sts	0x00CD, r1
 10a:	08 95       	ret

0000010c <USART_Flush>:
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	29 f4       	brne	.+10     	; 0x11a <USART_Flush+0xe>
 110:	80 91 c8 00 	lds	r24, 0x00C8
 114:	88 23       	and	r24, r24
 116:	84 f0       	brlt	.+32     	; 0x138 <USART_Flush+0x2c>
 118:	08 95       	ret
 11a:	80 91 c0 00 	lds	r24, 0x00C0
 11e:	88 23       	and	r24, r24
 120:	ac f4       	brge	.+42     	; 0x14c <USART_Flush+0x40>
 122:	a6 ec       	ldi	r26, 0xC6	; 198
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	80 93 04 01 	sts	0x0104, r24
 130:	80 81       	ld	r24, Z
 132:	88 23       	and	r24, r24
 134:	d4 f3       	brlt	.-12     	; 0x12a <USART_Flush+0x1e>
 136:	08 95       	ret
 138:	ae ec       	ldi	r26, 0xCE	; 206
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e8 ec       	ldi	r30, 0xC8	; 200
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8c 91       	ld	r24, X
 142:	80 93 04 01 	sts	0x0104, r24
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	d4 f3       	brlt	.-12     	; 0x140 <USART_Flush+0x34>
 14c:	08 95       	ret

0000014e <USART_Send>:
 14e:	61 30       	cpi	r22, 0x01	; 1
 150:	41 f0       	breq	.+16     	; 0x162 <USART_Send+0x14>
 152:	e0 ec       	ldi	r30, 0xC0	; 192
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	90 81       	ld	r25, Z
 158:	95 ff       	sbrs	r25, 5
 15a:	fd cf       	rjmp	.-6      	; 0x156 <USART_Send+0x8>
 15c:	80 93 c6 00 	sts	0x00C6, r24
 160:	08 95       	ret
 162:	e8 ec       	ldi	r30, 0xC8	; 200
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	90 81       	ld	r25, Z
 168:	95 ff       	sbrs	r25, 5
 16a:	fd cf       	rjmp	.-6      	; 0x166 <USART_Send+0x18>
 16c:	80 93 ce 00 	sts	0x00CE, r24
 170:	08 95       	ret

00000172 <TimerOn>:
 172:	8b e0       	ldi	r24, 0x0B	; 11
 174:	80 93 81 00 	sts	0x0081, r24
 178:	8d e7       	ldi	r24, 0x7D	; 125
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 89 00 	sts	0x0089, r25
 180:	80 93 88 00 	sts	0x0088, r24
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	80 93 6f 00 	sts	0x006F, r24
 18a:	10 92 85 00 	sts	0x0085, r1
 18e:	10 92 84 00 	sts	0x0084, r1
 192:	80 91 00 01 	lds	r24, 0x0100
 196:	90 91 01 01 	lds	r25, 0x0101
 19a:	a0 91 02 01 	lds	r26, 0x0102
 19e:	b0 91 03 01 	lds	r27, 0x0103
 1a2:	80 93 06 01 	sts	0x0106, r24
 1a6:	90 93 07 01 	sts	0x0107, r25
 1aa:	a0 93 08 01 	sts	0x0108, r26
 1ae:	b0 93 09 01 	sts	0x0109, r27
 1b2:	8f b7       	in	r24, 0x3f	; 63
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	8f bf       	out	0x3f, r24	; 63
 1b8:	08 95       	ret

000001ba <__vector_13>:
}

ISR(TIMER1_COMPA_vect)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 1cc:	80 91 06 01 	lds	r24, 0x0106
 1d0:	90 91 07 01 	lds	r25, 0x0107
 1d4:	a0 91 08 01 	lds	r26, 0x0108
 1d8:	b0 91 09 01 	lds	r27, 0x0109
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	a1 09       	sbc	r26, r1
 1e0:	b1 09       	sbc	r27, r1
 1e2:	80 93 06 01 	sts	0x0106, r24
 1e6:	90 93 07 01 	sts	0x0107, r25
 1ea:	a0 93 08 01 	sts	0x0108, r26
 1ee:	b0 93 09 01 	sts	0x0109, r27
	if (_avr_timer_cntcurr == 0) {
 1f2:	89 2b       	or	r24, r25
 1f4:	8a 2b       	or	r24, r26
 1f6:	8b 2b       	or	r24, r27
 1f8:	99 f4       	brne	.+38     	; 0x220 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR()  {
	TimerFlag = 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 0a 01 	sts	0x010A, r24
ISR(TIMER1_COMPA_vect)
{
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 200:	80 91 00 01 	lds	r24, 0x0100
 204:	90 91 01 01 	lds	r25, 0x0101
 208:	a0 91 02 01 	lds	r26, 0x0102
 20c:	b0 91 03 01 	lds	r27, 0x0103
 210:	80 93 06 01 	sts	0x0106, r24
 214:	90 93 07 01 	sts	0x0107, r25
 218:	a0 93 08 01 	sts	0x0108, r26
 21c:	b0 93 09 01 	sts	0x0109, r27
	}
}
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <TickFct_Status>:

unsigned char status = 0; 

enum Status_States { off, on } SM_State;
void TickFct_Status() {
	switch(SM_State) { // Transitions
 232:	80 91 0b 01 	lds	r24, 0x010B
 236:	88 23       	and	r24, r24
 238:	59 f0       	breq	.+22     	; 0x250 <TickFct_Status+0x1e>
		case off: // Initial transition
				SM_State = on;  
			break;
		case on:
				SM_State = off;
 23a:	10 92 0b 01 	sts	0x010B, r1
			SM_State = off; 
			break;
	}
	switch(SM_State) { // State actions
		case off:
			status = 0; 
 23e:	10 92 05 01 	sts	0x0105, r1
			USART_Flush(0);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	63 df       	rcall	.-314    	; 0x10c <USART_Flush>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 246:	80 91 c0 00 	lds	r24, 0x00C0
			if(USART_IsSendReady(0)){
 24a:	85 ff       	sbrs	r24, 5
 24c:	11 c0       	rjmp	.+34     	; 0x270 <TickFct_Status+0x3e>
 24e:	0c c0       	rjmp	.+24     	; 0x268 <TickFct_Status+0x36>

enum Status_States { off, on } SM_State;
void TickFct_Status() {
	switch(SM_State) { // Transitions
		case off: // Initial transition
				SM_State = on;  
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 0b 01 	sts	0x010B, r24
				USART_Send(status, 0);
			}
			PORTA = status; 
			break;
		case on: 
			status = 1;
 256:	80 93 05 01 	sts	0x0105, r24
			USART_Flush(0);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	57 df       	rcall	.-338    	; 0x10c <USART_Flush>
 25e:	80 91 c0 00 	lds	r24, 0x00C0
			if(USART_IsSendReady(0)){
 262:	85 ff       	sbrs	r24, 5
 264:	0d c0       	rjmp	.+26     	; 0x280 <TickFct_Status+0x4e>
 266:	08 c0       	rjmp	.+16     	; 0x278 <TickFct_Status+0x46>
	switch(SM_State) { // State actions
		case off:
			status = 0; 
			USART_Flush(0);
			if(USART_IsSendReady(0)){
				USART_Send(status, 0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 91 05 01 	lds	r24, 0x0105
 26e:	6f df       	rcall	.-290    	; 0x14e <USART_Send>
			}
			PORTA = status; 
 270:	80 91 05 01 	lds	r24, 0x0105
 274:	82 b9       	out	0x02, r24	; 2
			break;
 276:	08 95       	ret
		case on: 
			status = 1;
			USART_Flush(0);
			if(USART_IsSendReady(0)){
				USART_Send(status, 0);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	80 91 05 01 	lds	r24, 0x0105
 27e:	67 df       	rcall	.-306    	; 0x14e <USART_Send>
			}
			PORTA = status;
 280:	80 91 05 01 	lds	r24, 0x0105
 284:	82 b9       	out	0x02, r24	; 2
 286:	08 95       	ret

00000288 <main>:
	}
}

int main(void)
{	
	DDRA = 0xFF; PORTA = 0x00;
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	81 b9       	out	0x01, r24	; 1
 28c:	12 b8       	out	0x02, r1	; 2
	//DDRB = 0xFF; PORTB = 0x00; //For Switches
	DDRD = 0xFF; PORTD = 0x00; //For Leader Light
 28e:	8a b9       	out	0x0a, r24	; 10
 290:	1b b8       	out	0x0b, r1	; 11
	
	initUSART(0); // Initalize USART0
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	19 df       	rcall	.-462    	; 0xc8 <initUSART>
    SM_State = off;
 296:	10 92 0b 01 	sts	0x010B, r1
volatile unsigned char TimerFlag = 0;
unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 29a:	84 e6       	ldi	r24, 0x64	; 100
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	a0 e0       	ldi	r26, 0x00	; 0
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	80 93 00 01 	sts	0x0100, r24
 2a6:	90 93 01 01 	sts	0x0101, r25
 2aa:	a0 93 02 01 	sts	0x0102, r26
 2ae:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 2b2:	80 93 06 01 	sts	0x0106, r24
 2b6:	90 93 07 01 	sts	0x0107, r25
 2ba:	a0 93 08 01 	sts	0x0108, r26
 2be:	b0 93 09 01 	sts	0x0109, r27
	DDRD = 0xFF; PORTD = 0x00; //For Leader Light
	
	initUSART(0); // Initalize USART0
    SM_State = off;
    TimerSet(100);
    TimerOn();
 2c2:	57 df       	rcall	.-338    	; 0x172 <TimerOn>
    while(1)
    {
	   	TickFct_Status();
 2c4:	b6 df       	rcall	.-148    	; 0x232 <TickFct_Status>
	   	while(!TimerFlag){}
 2c6:	80 91 0a 01 	lds	r24, 0x010A
 2ca:	88 23       	and	r24, r24
 2cc:	e1 f3       	breq	.-8      	; 0x2c6 <main+0x3e>
	   	TimerFlag = 0;
 2ce:	10 92 0a 01 	sts	0x010A, r1
    }
 2d2:	f8 cf       	rjmp	.-16     	; 0x2c4 <main+0x3c>

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>

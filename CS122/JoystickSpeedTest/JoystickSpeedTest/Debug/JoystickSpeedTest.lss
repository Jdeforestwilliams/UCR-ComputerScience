
JoystickSpeedTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004d0  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800106  00800106  0000056a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002e8  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e6  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000493  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000263  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fe  00000000  00000000  00001297  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001395  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	75 c0       	rjmp	.+234    	; 0x120 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6f 01       	movw	r12, r30
  8e:	7b 01       	movw	r14, r22
  90:	87 01       	movw	r16, r14
  92:	94 01       	movw	r18, r8
  94:	a1 01       	movw	r20, r2
  96:	c5 01       	movw	r24, r10
  98:	e9 01       	movw	r28, r18
  9a:	0d 02       	muls	r16, r29

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e0 ed       	ldi	r30, 0xD0	; 208
  b0:	f4 e0       	ldi	r31, 0x04	; 4
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a6 e0       	ldi	r26, 0x06	; 6
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	ad 30       	cpi	r26, 0x0D	; 13
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	d1 d1       	rcall	.+930    	; 0x476 <main>
  d4:	fb c1       	rjmp	.+1014   	; 0x4cc <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <TimerOn>:
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  d8:	8b e0       	ldi	r24, 0x0B	; 11
  da:	80 93 81 00 	sts	0x0081, r24
  de:	8d e7       	ldi	r24, 0x7D	; 125
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 89 00 	sts	0x0089, r25
  e6:	80 93 88 00 	sts	0x0088, r24
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	80 93 6f 00 	sts	0x006F, r24
  f0:	10 92 85 00 	sts	0x0085, r1
  f4:	10 92 84 00 	sts	0x0084, r1
  f8:	80 91 02 01 	lds	r24, 0x0102
  fc:	90 91 03 01 	lds	r25, 0x0103
 100:	a0 91 04 01 	lds	r26, 0x0104
 104:	b0 91 05 01 	lds	r27, 0x0105
 108:	80 93 07 01 	sts	0x0107, r24
 10c:	90 93 08 01 	sts	0x0108, r25
 110:	a0 93 09 01 	sts	0x0109, r26
 114:	b0 93 0a 01 	sts	0x010A, r27
 118:	8f b7       	in	r24, 0x3f	; 63
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8f bf       	out	0x3f, r24	; 63
 11e:	08 95       	ret

00000120 <__vector_13>:
}

ISR(TIMER1_COMPA_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 132:	80 91 07 01 	lds	r24, 0x0107
 136:	90 91 08 01 	lds	r25, 0x0108
 13a:	a0 91 09 01 	lds	r26, 0x0109
 13e:	b0 91 0a 01 	lds	r27, 0x010A
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	a1 09       	sbc	r26, r1
 146:	b1 09       	sbc	r27, r1
 148:	80 93 07 01 	sts	0x0107, r24
 14c:	90 93 08 01 	sts	0x0108, r25
 150:	a0 93 09 01 	sts	0x0109, r26
 154:	b0 93 0a 01 	sts	0x010A, r27
	if (_avr_timer_cntcurr == 0) {
 158:	89 2b       	or	r24, r25
 15a:	8a 2b       	or	r24, r26
 15c:	8b 2b       	or	r24, r27
 15e:	99 f4       	brne	.+38     	; 0x186 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 0b 01 	sts	0x010B, r24
ISR(TIMER1_COMPA_vect)
{
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 166:	80 91 02 01 	lds	r24, 0x0102
 16a:	90 91 03 01 	lds	r25, 0x0103
 16e:	a0 91 04 01 	lds	r26, 0x0104
 172:	b0 91 05 01 	lds	r27, 0x0105
 176:	80 93 07 01 	sts	0x0107, r24
 17a:	90 93 08 01 	sts	0x0108, r25
 17e:	a0 93 09 01 	sts	0x0109, r26
 182:	b0 93 0a 01 	sts	0x010A, r27
	}
}
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <A2D_init>:

void A2D_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 198:	ea e7       	ldi	r30, 0x7A	; 122
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	80 6e       	ori	r24, 0xE0	; 224
 1a0:	80 83       	st	Z, r24
 1a2:	08 95       	ret

000001a4 <Set_A2D_Pin>:
	// ADATE: Enables auto-triggering, allowing for constant
	//	    analog to digital conversions.
}

void Set_A2D_Pin(unsigned char pinNum) {
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 1a4:	88 30       	cpi	r24, 0x08	; 8
 1a6:	60 f0       	brcs	.+24     	; 0x1c0 <Set_A2D_Pin+0x1c>
 1a8:	ec e7       	ldi	r30, 0x7C	; 124
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 83       	st	Z, r24
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <Set_A2D_Pin+0x20>
	// Allow channel to stabilize
	static unsigned char i = 0;
	for ( i=0; i<15; i++ ) { asm("nop"); }
 1b2:	00 00       	nop
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	e9 f7       	brne	.-6      	; 0x1b2 <Set_A2D_Pin+0xe>
 1b8:	8f e0       	ldi	r24, 0x0F	; 15
 1ba:	80 93 06 01 	sts	0x0106, r24
 1be:	08 95       	ret
	// ADATE: Enables auto-triggering, allowing for constant
	//	    analog to digital conversions.
}

void Set_A2D_Pin(unsigned char pinNum) {
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 1c0:	80 93 7c 00 	sts	0x007C, r24
	// ADSC: Starts analog-to-digital conversion
	// ADATE: Enables auto-triggering, allowing for constant
	//	    analog to digital conversions.
}

void Set_A2D_Pin(unsigned char pinNum) {
 1c4:	8f e0       	ldi	r24, 0x0F	; 15
 1c6:	f5 cf       	rjmp	.-22     	; 0x1b2 <Set_A2D_Pin+0xe>

000001c8 <Tick_Fct>:

unsigned char pattern = 0x80;
unsigned char row = 0xEF;
enum SM_States{init, wait_tilt, move_l, move_r, move_u, move_d, move_ul, move_ur, move_dl, move_dr} SM_State;

void Tick_Fct(){
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
	Set_A2D_Pin(0x00);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	e8 df       	rcall	.-48     	; 0x1a4 <Set_A2D_Pin>
	unsigned short input_lr = ADC;
 1d4:	c8 e7       	ldi	r28, 0x78	; 120
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
 1d8:	08 81       	ld	r16, Y
 1da:	19 81       	ldd	r17, Y+1	; 0x01
	Set_A2D_Pin(0x01);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	e2 df       	rcall	.-60     	; 0x1a4 <Set_A2D_Pin>
	unsigned short input_ud = ADC;
 1e0:	28 81       	ld	r18, Y
 1e2:	39 81       	ldd	r19, Y+1	; 0x01
		
	switch(SM_State){ //transitions
 1e4:	80 91 0c 01 	lds	r24, 0x010C
 1e8:	88 23       	and	r24, r24
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <Tick_Fct+0x2c>
 1ec:	8a 30       	cpi	r24, 0x0A	; 10
 1ee:	08 f0       	brcs	.+2      	; 0x1f2 <Tick_Fct+0x2a>
 1f0:	69 c0       	rjmp	.+210    	; 0x2c4 <Tick_Fct+0xfc>
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <Tick_Fct+0x34>
		case init:
			SM_State = wait_tilt;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 0c 01 	sts	0x010C, r24
			break;
 1fa:	32 c1       	rjmp	.+612    	; 0x460 <Tick_Fct+0x298>
		case move_d:
		case move_ul:
		case move_ur:
		case move_dl:
		case move_dr:
			if((input_lr > 510 && input_lr < 514) && (input_ud > 515 && input_ud < 524)){
 1fc:	a8 01       	movw	r20, r16
 1fe:	4f 5f       	subi	r20, 0xFF	; 255
 200:	51 40       	sbci	r21, 0x01	; 1
 202:	43 30       	cpi	r20, 0x03	; 3
 204:	51 05       	cpc	r21, r1
 206:	50 f4       	brcc	.+20     	; 0x21c <Tick_Fct+0x54>
 208:	b9 01       	movw	r22, r18
 20a:	64 50       	subi	r22, 0x04	; 4
 20c:	72 40       	sbci	r23, 0x02	; 2
 20e:	68 30       	cpi	r22, 0x08	; 8
 210:	71 05       	cpc	r23, r1
 212:	20 f4       	brcc	.+8      	; 0x21c <Tick_Fct+0x54>
				SM_State = wait_tilt;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 0c 01 	sts	0x010C, r24
 21a:	22 c1       	rjmp	.+580    	; 0x460 <Tick_Fct+0x298>
			}else if((input_lr < 510) && (input_ud > 515 && input_ud < 524)){
 21c:	0e 3f       	cpi	r16, 0xFE	; 254
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	19 07       	cpc	r17, r25
 222:	50 f4       	brcc	.+20     	; 0x238 <Tick_Fct+0x70>
 224:	b9 01       	movw	r22, r18
 226:	64 50       	subi	r22, 0x04	; 4
 228:	72 40       	sbci	r23, 0x02	; 2
 22a:	68 30       	cpi	r22, 0x08	; 8
 22c:	71 05       	cpc	r23, r1
 22e:	20 f4       	brcc	.+8      	; 0x238 <Tick_Fct+0x70>
				SM_State = move_l;
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 0c 01 	sts	0x010C, r24
 236:	53 c0       	rjmp	.+166    	; 0x2de <Tick_Fct+0x116>
			}else if((input_lr > 514) && (input_ud > 515 && input_ud < 524)){
 238:	03 30       	cpi	r16, 0x03	; 3
 23a:	92 e0       	ldi	r25, 0x02	; 2
 23c:	19 07       	cpc	r17, r25
 23e:	50 f0       	brcs	.+20     	; 0x254 <Tick_Fct+0x8c>
 240:	b9 01       	movw	r22, r18
 242:	64 50       	subi	r22, 0x04	; 4
 244:	72 40       	sbci	r23, 0x02	; 2
 246:	68 30       	cpi	r22, 0x08	; 8
 248:	71 05       	cpc	r23, r1
 24a:	20 f4       	brcc	.+8      	; 0x254 <Tick_Fct+0x8c>
				SM_State = move_r;
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	80 93 0c 01 	sts	0x010C, r24
 252:	51 c0       	rjmp	.+162    	; 0x2f6 <Tick_Fct+0x12e>
			}else if((input_lr > 510 && input_lr < 514) && (input_ud < 515)){
 254:	43 30       	cpi	r20, 0x03	; 3
 256:	51 05       	cpc	r21, r1
 258:	80 f4       	brcc	.+32     	; 0x27a <Tick_Fct+0xb2>
 25a:	23 30       	cpi	r18, 0x03	; 3
 25c:	92 e0       	ldi	r25, 0x02	; 2
 25e:	39 07       	cpc	r19, r25
 260:	20 f4       	brcc	.+8      	; 0x26a <Tick_Fct+0xa2>
				SM_State = move_d;
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	80 93 0c 01 	sts	0x010C, r24
 268:	5f c0       	rjmp	.+190    	; 0x328 <Tick_Fct+0x160>
			}else if((input_lr > 510 && input_lr < 514) && (input_ud > 524)){
 26a:	2d 30       	cpi	r18, 0x0D	; 13
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	39 07       	cpc	r19, r25
 270:	b8 f0       	brcs	.+46     	; 0x2a0 <Tick_Fct+0xd8>
				SM_State = move_u;
 272:	84 e0       	ldi	r24, 0x04	; 4
 274:	80 93 0c 01 	sts	0x010C, r24
 278:	4a c0       	rjmp	.+148    	; 0x30e <Tick_Fct+0x146>
			}else if(input_lr < 510 && input_ud < 515){
 27a:	0e 3f       	cpi	r16, 0xFE	; 254
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	19 07       	cpc	r17, r25
 280:	78 f4       	brcc	.+30     	; 0x2a0 <Tick_Fct+0xd8>
 282:	23 30       	cpi	r18, 0x03	; 3
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	39 07       	cpc	r19, r25
 288:	20 f4       	brcc	.+8      	; 0x292 <Tick_Fct+0xca>
				SM_State = move_dl;
 28a:	88 e0       	ldi	r24, 0x08	; 8
 28c:	80 93 0c 01 	sts	0x010C, r24
 290:	a0 c0       	rjmp	.+320    	; 0x3d2 <Tick_Fct+0x20a>
			}else if(input_lr < 510 && input_ud > 524){
 292:	2d 30       	cpi	r18, 0x0D	; 13
 294:	32 40       	sbci	r19, 0x02	; 2
 296:	c8 f0       	brcs	.+50     	; 0x2ca <Tick_Fct+0x102>
				SM_State = move_ul;
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	80 93 0c 01 	sts	0x010C, r24
 29e:	51 c0       	rjmp	.+162    	; 0x342 <Tick_Fct+0x17a>
			}else if(input_lr > 514 && input_ud < 515){
 2a0:	03 30       	cpi	r16, 0x03	; 3
 2a2:	12 40       	sbci	r17, 0x02	; 2
 2a4:	90 f0       	brcs	.+36     	; 0x2ca <Tick_Fct+0x102>
 2a6:	23 30       	cpi	r18, 0x03	; 3
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	39 07       	cpc	r19, r25
 2ac:	20 f4       	brcc	.+8      	; 0x2b6 <Tick_Fct+0xee>
				SM_State = move_dr;
 2ae:	89 e0       	ldi	r24, 0x09	; 9
 2b0:	80 93 0c 01 	sts	0x010C, r24
 2b4:	b2 c0       	rjmp	.+356    	; 0x41a <Tick_Fct+0x252>
			}else if(input_lr > 514 && input_ud > 524){
 2b6:	2d 30       	cpi	r18, 0x0D	; 13
 2b8:	32 40       	sbci	r19, 0x02	; 2
 2ba:	38 f0       	brcs	.+14     	; 0x2ca <Tick_Fct+0x102>
				SM_State = move_ur;
 2bc:	87 e0       	ldi	r24, 0x07	; 7
 2be:	80 93 0c 01 	sts	0x010C, r24
 2c2:	63 c0       	rjmp	.+198    	; 0x38a <Tick_Fct+0x1c2>
			}
			break;			
			
		default:
			SM_State = init;
 2c4:	10 92 0c 01 	sts	0x010C, r1
			break;
 2c8:	cb c0       	rjmp	.+406    	; 0x460 <Tick_Fct+0x298>
	}
	
	switch(SM_State){ //actions
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	fc 01       	movw	r30, r24
 2ce:	32 97       	sbiw	r30, 0x02	; 2
 2d0:	e8 30       	cpi	r30, 0x08	; 8
 2d2:	f1 05       	cpc	r31, r1
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <Tick_Fct+0x110>
 2d6:	c4 c0       	rjmp	.+392    	; 0x460 <Tick_Fct+0x298>
 2d8:	ea 5b       	subi	r30, 0xBA	; 186
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	f1 c0       	rjmp	.+482    	; 0x4c0 <__tablejump2__>
		case wait_tilt:
			break;
		
		case move_l:
			if(pattern != 0x80){
 2de:	80 91 01 01 	lds	r24, 0x0101
 2e2:	80 38       	cpi	r24, 0x80	; 128
 2e4:	21 f0       	breq	.+8      	; 0x2ee <Tick_Fct+0x126>
				pattern <<= 1;
 2e6:	88 0f       	add	r24, r24
 2e8:	80 93 01 01 	sts	0x0101, r24
 2ec:	b9 c0       	rjmp	.+370    	; 0x460 <Tick_Fct+0x298>
			}
			else {
				pattern = 0x01;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 01 01 	sts	0x0101, r24
 2f4:	b5 c0       	rjmp	.+362    	; 0x460 <Tick_Fct+0x298>
			}
			break;
		
		case move_r:
			if(pattern != 0x01){
 2f6:	80 91 01 01 	lds	r24, 0x0101
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	21 f0       	breq	.+8      	; 0x306 <Tick_Fct+0x13e>
				pattern >>= 1;
 2fe:	86 95       	lsr	r24
 300:	80 93 01 01 	sts	0x0101, r24
 304:	ad c0       	rjmp	.+346    	; 0x460 <Tick_Fct+0x298>
			}else{
				pattern = 0x80;
 306:	80 e8       	ldi	r24, 0x80	; 128
 308:	80 93 01 01 	sts	0x0101, r24
 30c:	a9 c0       	rjmp	.+338    	; 0x460 <Tick_Fct+0x298>
			}
			break;
		
		case move_u:
			if(row != 0xEF){
 30e:	80 91 00 01 	lds	r24, 0x0100
 312:	8f 3e       	cpi	r24, 0xEF	; 239
 314:	29 f0       	breq	.+10     	; 0x320 <Tick_Fct+0x158>
				row = (row << 1) | 0x01;
 316:	88 0f       	add	r24, r24
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	80 93 00 01 	sts	0x0100, r24
 31e:	a0 c0       	rjmp	.+320    	; 0x460 <Tick_Fct+0x298>
			}else{
				row = 0xFE;
 320:	8e ef       	ldi	r24, 0xFE	; 254
 322:	80 93 00 01 	sts	0x0100, r24
 326:	9c c0       	rjmp	.+312    	; 0x460 <Tick_Fct+0x298>
			}
			break;
		
		case move_d:
			if(row != 0xFE){
 328:	80 91 00 01 	lds	r24, 0x0100
 32c:	8e 3f       	cpi	r24, 0xFE	; 254
 32e:	29 f0       	breq	.+10     	; 0x33a <Tick_Fct+0x172>
				row = (row >> 1) | 0x80;
 330:	86 95       	lsr	r24
 332:	80 68       	ori	r24, 0x80	; 128
 334:	80 93 00 01 	sts	0x0100, r24
 338:	93 c0       	rjmp	.+294    	; 0x460 <Tick_Fct+0x298>
			}else{
				row = 0xEF;
 33a:	8f ee       	ldi	r24, 0xEF	; 239
 33c:	80 93 00 01 	sts	0x0100, r24
 340:	8f c0       	rjmp	.+286    	; 0x460 <Tick_Fct+0x298>
			}
			break;
		
		case move_ul:
			if(row != 0xEF && pattern != 0x80){
 342:	80 91 00 01 	lds	r24, 0x0100
 346:	8f 3e       	cpi	r24, 0xEF	; 239
 348:	61 f0       	breq	.+24     	; 0x362 <Tick_Fct+0x19a>
 34a:	90 91 01 01 	lds	r25, 0x0101
 34e:	90 38       	cpi	r25, 0x80	; 128
 350:	81 f0       	breq	.+32     	; 0x372 <Tick_Fct+0x1aa>
				row = (row << 1) | 0x01;
 352:	88 0f       	add	r24, r24
 354:	81 60       	ori	r24, 0x01	; 1
 356:	80 93 00 01 	sts	0x0100, r24
				pattern <<= 1;
 35a:	99 0f       	add	r25, r25
 35c:	90 93 01 01 	sts	0x0101, r25
 360:	7f c0       	rjmp	.+254    	; 0x460 <Tick_Fct+0x298>
			}else if(row == 0xEF && pattern != 0x80){
 362:	80 91 01 01 	lds	r24, 0x0101
 366:	80 38       	cpi	r24, 0x80	; 128
 368:	49 f0       	breq	.+18     	; 0x37c <Tick_Fct+0x1b4>
				pattern <<= 1;
 36a:	88 0f       	add	r24, r24
 36c:	80 93 01 01 	sts	0x0101, r24
 370:	77 c0       	rjmp	.+238    	; 0x460 <Tick_Fct+0x298>
			}else if(row != 0xEF && pattern == 0x80){
				row = (row << 1) | 0x01;
 372:	88 0f       	add	r24, r24
 374:	81 60       	ori	r24, 0x01	; 1
 376:	80 93 00 01 	sts	0x0100, r24
 37a:	72 c0       	rjmp	.+228    	; 0x460 <Tick_Fct+0x298>
			}else if(row == 0xEF && pattern == 0x80){
				pattern = 0x01;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 93 01 01 	sts	0x0101, r24
				row = 0xFE;
 382:	8e ef       	ldi	r24, 0xFE	; 254
 384:	80 93 00 01 	sts	0x0100, r24
 388:	6b c0       	rjmp	.+214    	; 0x460 <Tick_Fct+0x298>
			}
			break;
		
		case move_ur:
			if(row != 0xEF && pattern != 0x01){
 38a:	80 91 00 01 	lds	r24, 0x0100
 38e:	8f 3e       	cpi	r24, 0xEF	; 239
 390:	61 f0       	breq	.+24     	; 0x3aa <Tick_Fct+0x1e2>
 392:	90 91 01 01 	lds	r25, 0x0101
 396:	91 30       	cpi	r25, 0x01	; 1
 398:	81 f0       	breq	.+32     	; 0x3ba <Tick_Fct+0x1f2>
				row = (row << 1) | 0x01;
 39a:	88 0f       	add	r24, r24
 39c:	81 60       	ori	r24, 0x01	; 1
 39e:	80 93 00 01 	sts	0x0100, r24
				pattern >>= 1;
 3a2:	96 95       	lsr	r25
 3a4:	90 93 01 01 	sts	0x0101, r25
 3a8:	5b c0       	rjmp	.+182    	; 0x460 <Tick_Fct+0x298>
			}else if(row == 0xEF && pattern != 0x01){
 3aa:	80 91 01 01 	lds	r24, 0x0101
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	49 f0       	breq	.+18     	; 0x3c4 <Tick_Fct+0x1fc>
				pattern >>= 1;
 3b2:	86 95       	lsr	r24
 3b4:	80 93 01 01 	sts	0x0101, r24
 3b8:	53 c0       	rjmp	.+166    	; 0x460 <Tick_Fct+0x298>
			}else if(row != 0xEF && pattern == 0x01){
				row = (row << 1) | 0x01;
 3ba:	88 0f       	add	r24, r24
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	80 93 00 01 	sts	0x0100, r24
 3c2:	4e c0       	rjmp	.+156    	; 0x460 <Tick_Fct+0x298>
			}else if(row == 0xEF && pattern == 0x01){
				pattern = 0x80;
 3c4:	80 e8       	ldi	r24, 0x80	; 128
 3c6:	80 93 01 01 	sts	0x0101, r24
				row = 0xFE;
 3ca:	8e ef       	ldi	r24, 0xFE	; 254
 3cc:	80 93 00 01 	sts	0x0100, r24
 3d0:	47 c0       	rjmp	.+142    	; 0x460 <Tick_Fct+0x298>
			}
			break;
		
		case move_dl:
			if(row != 0xFE && pattern != 0x80){
 3d2:	80 91 00 01 	lds	r24, 0x0100
 3d6:	8e 3f       	cpi	r24, 0xFE	; 254
 3d8:	61 f0       	breq	.+24     	; 0x3f2 <Tick_Fct+0x22a>
 3da:	90 91 01 01 	lds	r25, 0x0101
 3de:	90 38       	cpi	r25, 0x80	; 128
 3e0:	81 f0       	breq	.+32     	; 0x402 <Tick_Fct+0x23a>
				row = (row >> 1) | 0x80;
 3e2:	86 95       	lsr	r24
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	80 93 00 01 	sts	0x0100, r24
				pattern <<= 1;
 3ea:	99 0f       	add	r25, r25
 3ec:	90 93 01 01 	sts	0x0101, r25
 3f0:	37 c0       	rjmp	.+110    	; 0x460 <Tick_Fct+0x298>
			}else if(row == 0xFE && pattern != 0x80){
 3f2:	80 91 01 01 	lds	r24, 0x0101
 3f6:	80 38       	cpi	r24, 0x80	; 128
 3f8:	49 f0       	breq	.+18     	; 0x40c <Tick_Fct+0x244>
				pattern <<= 1;
 3fa:	88 0f       	add	r24, r24
 3fc:	80 93 01 01 	sts	0x0101, r24
 400:	2f c0       	rjmp	.+94     	; 0x460 <Tick_Fct+0x298>
			}else if(row != 0xFE && pattern == 0x80){
				row = (row >> 1) | 0x80;
 402:	86 95       	lsr	r24
 404:	80 68       	ori	r24, 0x80	; 128
 406:	80 93 00 01 	sts	0x0100, r24
 40a:	2a c0       	rjmp	.+84     	; 0x460 <Tick_Fct+0x298>
			}else if(row == 0xFE && pattern == 0x80){
				pattern = 0x01;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 93 01 01 	sts	0x0101, r24
				row = 0xEF;
 412:	8f ee       	ldi	r24, 0xEF	; 239
 414:	80 93 00 01 	sts	0x0100, r24
 418:	23 c0       	rjmp	.+70     	; 0x460 <Tick_Fct+0x298>
			}				
			break;
		
		case move_dr:
			if(row != 0xFE && pattern != 0x01){
 41a:	80 91 00 01 	lds	r24, 0x0100
 41e:	8e 3f       	cpi	r24, 0xFE	; 254
 420:	61 f0       	breq	.+24     	; 0x43a <Tick_Fct+0x272>
 422:	90 91 01 01 	lds	r25, 0x0101
 426:	91 30       	cpi	r25, 0x01	; 1
 428:	81 f0       	breq	.+32     	; 0x44a <Tick_Fct+0x282>
				row = (row >> 1) | 0x80;
 42a:	86 95       	lsr	r24
 42c:	80 68       	ori	r24, 0x80	; 128
 42e:	80 93 00 01 	sts	0x0100, r24
				pattern >>= 1;
 432:	96 95       	lsr	r25
 434:	90 93 01 01 	sts	0x0101, r25
 438:	13 c0       	rjmp	.+38     	; 0x460 <Tick_Fct+0x298>
			}else if(row == 0xFE && pattern != 0x01){
 43a:	80 91 01 01 	lds	r24, 0x0101
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	49 f0       	breq	.+18     	; 0x454 <Tick_Fct+0x28c>
				pattern >>= 1;
 442:	86 95       	lsr	r24
 444:	80 93 01 01 	sts	0x0101, r24
 448:	0b c0       	rjmp	.+22     	; 0x460 <Tick_Fct+0x298>
			}else if(row != 0xFE && pattern == 0x01){
				row = (row >> 1) | 0x80;
 44a:	86 95       	lsr	r24
 44c:	80 68       	ori	r24, 0x80	; 128
 44e:	80 93 00 01 	sts	0x0100, r24
 452:	06 c0       	rjmp	.+12     	; 0x460 <Tick_Fct+0x298>
			}else if(row == 0xFE && pattern == 0x01){
				pattern = 0x80;
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	80 93 01 01 	sts	0x0101, r24
				row = 0xEF;
 45a:	8f ee       	ldi	r24, 0xEF	; 239
 45c:	80 93 00 01 	sts	0x0100, r24
			break;
			
		default:
			break;
	}
	PORTC = pattern;
 460:	80 91 01 01 	lds	r24, 0x0101
 464:	88 b9       	out	0x08, r24	; 8
	PORTD = row;
 466:	80 91 00 01 	lds	r24, 0x0100
 46a:	8b b9       	out	0x0b, r24	; 11
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	08 95       	ret

00000476 <main>:

int main(void)
{
	DDRC = 0xFF; PORTC = 0x00;
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	87 b9       	out	0x07, r24	; 7
 47a:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 47c:	8a b9       	out	0x0a, r24	; 10
 47e:	1b b8       	out	0x0b, r1	; 11
	
	SM_State = init;
 480:	10 92 0c 01 	sts	0x010C, r1
volatile unsigned char TimerFlag = 0;
unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 484:	84 e6       	ldi	r24, 0x64	; 100
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a0 e0       	ldi	r26, 0x00	; 0
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	80 93 02 01 	sts	0x0102, r24
 490:	90 93 03 01 	sts	0x0103, r25
 494:	a0 93 04 01 	sts	0x0104, r26
 498:	b0 93 05 01 	sts	0x0105, r27
	_avr_timer_cntcurr = _avr_timer_M;
 49c:	80 93 07 01 	sts	0x0107, r24
 4a0:	90 93 08 01 	sts	0x0108, r25
 4a4:	a0 93 09 01 	sts	0x0109, r26
 4a8:	b0 93 0a 01 	sts	0x010A, r27
	DDRC = 0xFF; PORTC = 0x00;
	DDRD = 0xFF; PORTD = 0x00;
	
	SM_State = init;
	TimerSet(100);
	TimerOn();
 4ac:	15 de       	rcall	.-982    	; 0xd8 <TimerOn>
	A2D_init();
 4ae:	74 de       	rcall	.-792    	; 0x198 <A2D_init>
	while(1)
	{
		Tick_Fct();
 4b0:	8b de       	rcall	.-746    	; 0x1c8 <Tick_Fct>
		while(!TimerFlag){}
 4b2:	80 91 0b 01 	lds	r24, 0x010B
 4b6:	88 23       	and	r24, r24
 4b8:	e1 f3       	breq	.-8      	; 0x4b2 <main+0x3c>
		TimerFlag = 0;
 4ba:	10 92 0b 01 	sts	0x010B, r1
	}
 4be:	f8 cf       	rjmp	.-16     	; 0x4b0 <main+0x3a>

000004c0 <__tablejump2__>:
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31

000004c4 <__tablejump__>:
 4c4:	05 90       	lpm	r0, Z+
 4c6:	f4 91       	lpm	r31, Z
 4c8:	e0 2d       	mov	r30, r0
 4ca:	09 94       	ijmp

000004cc <_exit>:
 4cc:	f8 94       	cli

000004ce <__stop_program>:
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>

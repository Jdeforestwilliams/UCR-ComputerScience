
JoystickTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000063a  000006ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000063a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  000006d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000702  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000022e  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011f  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043e  00000000  00000000  00000aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024c  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f0  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	bf c0       	rjmp	.+382    	; 0x1b4 <__vector_13>
  36:	00 00       	nop
  38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
  76:	00 00       	nop
  78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	66 02       	muls	r22, r22
  8e:	6c 02       	muls	r22, r28
  90:	7a 02       	muls	r23, r26
  92:	88 02       	muls	r24, r24
  94:	96 02       	muls	r25, r22
  96:	a4 02       	muls	r26, r20
  98:	b2 02       	muls	r27, r18
  9a:	c0 02       	muls	r28, r16
  9c:	ce 02       	muls	r28, r30

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	ea e3       	ldi	r30, 0x3A	; 58
  b2:	f6 e0       	ldi	r31, 0x06	; 6
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a4 30       	cpi	r26, 0x04	; 4
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a4 e0       	ldi	r26, 0x04	; 4
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	ab 30       	cpi	r26, 0x0B	; 11
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	79 d2       	rcall	.+1266   	; 0x5c8 <main>
  d6:	af c2       	rjmp	.+1374   	; 0x636 <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <TimerSet>:
	SREG |= 0x80;
}

void TimerOff() {
	TCCR1B 	= 0x00;
}
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <TimerSet+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <TimerSet+0x8>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	69 83       	std	Y+1, r22	; 0x01
  e8:	7a 83       	std	Y+2, r23	; 0x02
  ea:	8b 83       	std	Y+3, r24	; 0x03
  ec:	9c 83       	std	Y+4, r25	; 0x04
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	ab 81       	ldd	r26, Y+3	; 0x03
  f4:	bc 81       	ldd	r27, Y+4	; 0x04
  f6:	80 93 00 01 	sts	0x0100, r24
  fa:	90 93 01 01 	sts	0x0101, r25
  fe:	a0 93 02 01 	sts	0x0102, r26
 102:	b0 93 03 01 	sts	0x0103, r27
 106:	80 91 00 01 	lds	r24, 0x0100
 10a:	90 91 01 01 	lds	r25, 0x0101
 10e:	a0 91 02 01 	lds	r26, 0x0102
 112:	b0 91 03 01 	lds	r27, 0x0103
 116:	80 93 05 01 	sts	0x0105, r24
 11a:	90 93 06 01 	sts	0x0106, r25
 11e:	a0 93 07 01 	sts	0x0107, r26
 122:	b0 93 08 01 	sts	0x0108, r27
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <TimerOn>:
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	81 e8       	ldi	r24, 0x81	; 129
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2b e0       	ldi	r18, 0x0B	; 11
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
 146:	88 e8       	ldi	r24, 0x88	; 136
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	2d e7       	ldi	r18, 0x7D	; 125
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	31 83       	std	Z+1, r19	; 0x01
 152:	20 83       	st	Z, r18
 154:	8f e6       	ldi	r24, 0x6F	; 111
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	22 e0       	ldi	r18, 0x02	; 2
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
 15e:	84 e8       	ldi	r24, 0x84	; 132
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fc 01       	movw	r30, r24
 164:	11 82       	std	Z+1, r1	; 0x01
 166:	10 82       	st	Z, r1
 168:	80 91 00 01 	lds	r24, 0x0100
 16c:	90 91 01 01 	lds	r25, 0x0101
 170:	a0 91 02 01 	lds	r26, 0x0102
 174:	b0 91 03 01 	lds	r27, 0x0103
 178:	80 93 05 01 	sts	0x0105, r24
 17c:	90 93 06 01 	sts	0x0106, r25
 180:	a0 93 07 01 	sts	0x0107, r26
 184:	b0 93 08 01 	sts	0x0108, r27
 188:	8f e5       	ldi	r24, 0x5F	; 95
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2f e5       	ldi	r18, 0x5F	; 95
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	20 68       	ori	r18, 0x80	; 128
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <TimerISR>:

void TimerISR() {
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 04 01 	sts	0x0104, r24
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	00 90 5f 00 	lds	r0, 0x005F
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	00 90 5b 00 	lds	r0, 0x005B
 1c4:	0f 92       	push	r0
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	_avr_timer_cntcurr--;
 1e6:	80 91 05 01 	lds	r24, 0x0105
 1ea:	90 91 06 01 	lds	r25, 0x0106
 1ee:	a0 91 07 01 	lds	r26, 0x0107
 1f2:	b0 91 08 01 	lds	r27, 0x0108
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	a1 09       	sbc	r26, r1
 1fa:	b1 09       	sbc	r27, r1
 1fc:	80 93 05 01 	sts	0x0105, r24
 200:	90 93 06 01 	sts	0x0106, r25
 204:	a0 93 07 01 	sts	0x0107, r26
 208:	b0 93 08 01 	sts	0x0108, r27
	if (_avr_timer_cntcurr == 0) {
 20c:	80 91 05 01 	lds	r24, 0x0105
 210:	90 91 06 01 	lds	r25, 0x0106
 214:	a0 91 07 01 	lds	r26, 0x0107
 218:	b0 91 08 01 	lds	r27, 0x0108
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	a1 05       	cpc	r26, r1
 220:	b1 05       	cpc	r27, r1
 222:	89 f4       	brne	.+34     	; 0x246 <__vector_13+0x92>
		TimerISR();
 224:	bd df       	rcall	.-134    	; 0x1a0 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 226:	80 91 00 01 	lds	r24, 0x0100
 22a:	90 91 01 01 	lds	r25, 0x0101
 22e:	a0 91 02 01 	lds	r26, 0x0102
 232:	b0 91 03 01 	lds	r27, 0x0103
 236:	80 93 05 01 	sts	0x0105, r24
 23a:	90 93 06 01 	sts	0x0106, r25
 23e:	a0 93 07 01 	sts	0x0107, r26
 242:	b0 93 08 01 	sts	0x0108, r27
	}
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	00 92 5b 00 	sts	0x005B, r0
 268:	0f 90       	pop	r0
 26a:	00 92 5f 00 	sts	0x005F, r0
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <A2D_init>:

void A2D_init() {
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 27c:	8a e7       	ldi	r24, 0x7A	; 122
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	2a e7       	ldi	r18, 0x7A	; 122
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	20 6e       	ori	r18, 0xE0	; 224
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
	// ADEN: Enables analog-to-digital conversion
	// ADSC: Starts analog-to-digital conversion
	// ADATE: Enables auto-triggering, allowing for constant
	//	    analog to digital conversions.
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <Set_A2D_Pin>:

void Set_A2D_Pin(unsigned char pinNum) {
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	1f 92       	push	r1
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 2a0:	8c e7       	ldi	r24, 0x7C	; 124
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	29 81       	ldd	r18, Y+1	; 0x01
 2a6:	28 30       	cpi	r18, 0x08	; 8
 2a8:	28 f0       	brcs	.+10     	; 0x2b4 <Set_A2D_Pin+0x20>
 2aa:	2c e7       	ldi	r18, 0x7C	; 124
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	20 81       	ld	r18, Z
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <Set_A2D_Pin+0x22>
 2b4:	29 81       	ldd	r18, Y+1	; 0x01
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
	// Allow channel to stabilize
	static unsigned char i = 0;
	for ( i=0; i<15; i++ ) { asm("nop"); }
 2ba:	10 92 09 01 	sts	0x0109, r1
 2be:	06 c0       	rjmp	.+12     	; 0x2cc <Set_A2D_Pin+0x38>
 2c0:	00 00       	nop
 2c2:	80 91 09 01 	lds	r24, 0x0109
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 09 01 	sts	0x0109, r24
 2cc:	80 91 09 01 	lds	r24, 0x0109
 2d0:	8f 30       	cpi	r24, 0x0F	; 15
 2d2:	b0 f3       	brcs	.-20     	; 0x2c0 <Set_A2D_Pin+0x2c>
}
 2d4:	0f 90       	pop	r0
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <Tick_Fct>:

//unsigned char pattern = 0x80;
//unsigned char row = 0xEF;
enum SM_States{init, wait_tilt, move_l, move_r, move_u, move_d, move_ul, move_ur, move_dl, move_dr} SM_State;

void Tick_Fct(){
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <Tick_Fct+0x6>
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <Tick_Fct+0x8>
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
	Set_A2D_Pin(0x00);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	d4 df       	rcall	.-88     	; 0x294 <Set_A2D_Pin>
	unsigned short input_lr = ADC;
 2ec:	88 e7       	ldi	r24, 0x78	; 120
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	fc 01       	movw	r30, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	91 81       	ldd	r25, Z+1	; 0x01
 2f6:	9a 83       	std	Y+2, r25	; 0x02
 2f8:	89 83       	std	Y+1, r24	; 0x01
	Set_A2D_Pin(0x01);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	cb df       	rcall	.-106    	; 0x294 <Set_A2D_Pin>
	unsigned short input_ud = ADC;
 2fe:	88 e7       	ldi	r24, 0x78	; 120
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	fc 01       	movw	r30, r24
 304:	80 81       	ld	r24, Z
 306:	91 81       	ldd	r25, Z+1	; 0x01
 308:	9c 83       	std	Y+4, r25	; 0x04
 30a:	8b 83       	std	Y+3, r24	; 0x03
		
	switch(SM_State){ //transitions
 30c:	80 91 0a 01 	lds	r24, 0x010A
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	00 97       	sbiw	r24, 0x00	; 0
 316:	41 f0       	breq	.+16     	; 0x328 <Tick_Fct+0x4c>
 318:	99 23       	and	r25, r25
 31a:	0c f4       	brge	.+2      	; 0x31e <Tick_Fct+0x42>
 31c:	be c0       	rjmp	.+380    	; 0x49a <Tick_Fct+0x1be>
 31e:	8a 30       	cpi	r24, 0x0A	; 10
 320:	91 05       	cpc	r25, r1
 322:	0c f0       	brlt	.+2      	; 0x326 <Tick_Fct+0x4a>
 324:	ba c0       	rjmp	.+372    	; 0x49a <Tick_Fct+0x1be>
 326:	04 c0       	rjmp	.+8      	; 0x330 <Tick_Fct+0x54>
		case init:
			SM_State = wait_tilt;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 0a 01 	sts	0x010A, r24
			break;
 32e:	b8 c0       	rjmp	.+368    	; 0x4a0 <Tick_Fct+0x1c4>
		case move_d:
		case move_ul:
		case move_ur:
		case move_dl:
		case move_dr:
			if((input_lr > 510 && input_lr < 514) && (input_ud > 515 && input_ud < 524)){
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	9a 81       	ldd	r25, Y+2	; 0x02
 334:	8f 3f       	cpi	r24, 0xFF	; 255
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	9f 07       	cpc	r25, r31
 33a:	b0 f0       	brcs	.+44     	; 0x368 <Tick_Fct+0x8c>
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	9a 81       	ldd	r25, Y+2	; 0x02
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	22 e0       	ldi	r18, 0x02	; 2
 344:	92 07       	cpc	r25, r18
 346:	80 f4       	brcc	.+32     	; 0x368 <Tick_Fct+0x8c>
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	9c 81       	ldd	r25, Y+4	; 0x04
 34c:	84 30       	cpi	r24, 0x04	; 4
 34e:	e2 e0       	ldi	r30, 0x02	; 2
 350:	9e 07       	cpc	r25, r30
 352:	50 f0       	brcs	.+20     	; 0x368 <Tick_Fct+0x8c>
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	9c 81       	ldd	r25, Y+4	; 0x04
 358:	8c 30       	cpi	r24, 0x0C	; 12
 35a:	f2 e0       	ldi	r31, 0x02	; 2
 35c:	9f 07       	cpc	r25, r31
 35e:	20 f4       	brcc	.+8      	; 0x368 <Tick_Fct+0x8c>
				SM_State = wait_tilt;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 0a 01 	sts	0x010A, r24
 366:	98 c0       	rjmp	.+304    	; 0x498 <Tick_Fct+0x1bc>
			}else if((input_lr < 510) && (input_ud > 515 && input_ud < 524)){
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	9a 81       	ldd	r25, Y+2	; 0x02
 36c:	8e 3f       	cpi	r24, 0xFE	; 254
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	92 07       	cpc	r25, r18
 372:	80 f4       	brcc	.+32     	; 0x394 <Tick_Fct+0xb8>
 374:	8b 81       	ldd	r24, Y+3	; 0x03
 376:	9c 81       	ldd	r25, Y+4	; 0x04
 378:	84 30       	cpi	r24, 0x04	; 4
 37a:	e2 e0       	ldi	r30, 0x02	; 2
 37c:	9e 07       	cpc	r25, r30
 37e:	50 f0       	brcs	.+20     	; 0x394 <Tick_Fct+0xb8>
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	9c 81       	ldd	r25, Y+4	; 0x04
 384:	8c 30       	cpi	r24, 0x0C	; 12
 386:	f2 e0       	ldi	r31, 0x02	; 2
 388:	9f 07       	cpc	r25, r31
 38a:	20 f4       	brcc	.+8      	; 0x394 <Tick_Fct+0xb8>
				SM_State = move_l;
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	80 93 0a 01 	sts	0x010A, r24
 392:	82 c0       	rjmp	.+260    	; 0x498 <Tick_Fct+0x1bc>
			}else if((input_lr > 514) && (input_ud > 515 && input_ud < 524)){
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	9a 81       	ldd	r25, Y+2	; 0x02
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	22 e0       	ldi	r18, 0x02	; 2
 39c:	92 07       	cpc	r25, r18
 39e:	80 f0       	brcs	.+32     	; 0x3c0 <Tick_Fct+0xe4>
 3a0:	8b 81       	ldd	r24, Y+3	; 0x03
 3a2:	9c 81       	ldd	r25, Y+4	; 0x04
 3a4:	84 30       	cpi	r24, 0x04	; 4
 3a6:	e2 e0       	ldi	r30, 0x02	; 2
 3a8:	9e 07       	cpc	r25, r30
 3aa:	50 f0       	brcs	.+20     	; 0x3c0 <Tick_Fct+0xe4>
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	9c 81       	ldd	r25, Y+4	; 0x04
 3b0:	8c 30       	cpi	r24, 0x0C	; 12
 3b2:	f2 e0       	ldi	r31, 0x02	; 2
 3b4:	9f 07       	cpc	r25, r31
 3b6:	20 f4       	brcc	.+8      	; 0x3c0 <Tick_Fct+0xe4>
				SM_State = move_r;
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	80 93 0a 01 	sts	0x010A, r24
 3be:	6c c0       	rjmp	.+216    	; 0x498 <Tick_Fct+0x1bc>
			}else if((input_lr > 510 && input_lr < 514) && (input_ud < 515)){
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
 3c2:	9a 81       	ldd	r25, Y+2	; 0x02
 3c4:	8f 3f       	cpi	r24, 0xFF	; 255
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	92 07       	cpc	r25, r18
 3ca:	80 f0       	brcs	.+32     	; 0x3ec <Tick_Fct+0x110>
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	9a 81       	ldd	r25, Y+2	; 0x02
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	e2 e0       	ldi	r30, 0x02	; 2
 3d4:	9e 07       	cpc	r25, r30
 3d6:	50 f4       	brcc	.+20     	; 0x3ec <Tick_Fct+0x110>
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	9c 81       	ldd	r25, Y+4	; 0x04
 3dc:	83 30       	cpi	r24, 0x03	; 3
 3de:	f2 e0       	ldi	r31, 0x02	; 2
 3e0:	9f 07       	cpc	r25, r31
 3e2:	20 f4       	brcc	.+8      	; 0x3ec <Tick_Fct+0x110>
				SM_State = move_d;
 3e4:	85 e0       	ldi	r24, 0x05	; 5
 3e6:	80 93 0a 01 	sts	0x010A, r24
 3ea:	56 c0       	rjmp	.+172    	; 0x498 <Tick_Fct+0x1bc>
			}else if((input_lr > 510 && input_lr < 514) && (input_ud > 524)){
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	9a 81       	ldd	r25, Y+2	; 0x02
 3f0:	8f 3f       	cpi	r24, 0xFF	; 255
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	92 07       	cpc	r25, r18
 3f6:	80 f0       	brcs	.+32     	; 0x418 <Tick_Fct+0x13c>
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	9a 81       	ldd	r25, Y+2	; 0x02
 3fc:	82 30       	cpi	r24, 0x02	; 2
 3fe:	e2 e0       	ldi	r30, 0x02	; 2
 400:	9e 07       	cpc	r25, r30
 402:	50 f4       	brcc	.+20     	; 0x418 <Tick_Fct+0x13c>
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	9c 81       	ldd	r25, Y+4	; 0x04
 408:	8d 30       	cpi	r24, 0x0D	; 13
 40a:	f2 e0       	ldi	r31, 0x02	; 2
 40c:	9f 07       	cpc	r25, r31
 40e:	20 f0       	brcs	.+8      	; 0x418 <Tick_Fct+0x13c>
				SM_State = move_u;
 410:	84 e0       	ldi	r24, 0x04	; 4
 412:	80 93 0a 01 	sts	0x010A, r24
 416:	40 c0       	rjmp	.+128    	; 0x498 <Tick_Fct+0x1bc>
			}else if(input_lr < 510 && input_ud < 515){
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	9a 81       	ldd	r25, Y+2	; 0x02
 41c:	8e 3f       	cpi	r24, 0xFE	; 254
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	92 07       	cpc	r25, r18
 422:	50 f4       	brcc	.+20     	; 0x438 <Tick_Fct+0x15c>
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	9c 81       	ldd	r25, Y+4	; 0x04
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	e2 e0       	ldi	r30, 0x02	; 2
 42c:	9e 07       	cpc	r25, r30
 42e:	20 f4       	brcc	.+8      	; 0x438 <Tick_Fct+0x15c>
				SM_State = move_dl;
 430:	88 e0       	ldi	r24, 0x08	; 8
 432:	80 93 0a 01 	sts	0x010A, r24
 436:	30 c0       	rjmp	.+96     	; 0x498 <Tick_Fct+0x1bc>
			}else if(input_lr < 510 && input_ud > 524){
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	9a 81       	ldd	r25, Y+2	; 0x02
 43c:	8e 3f       	cpi	r24, 0xFE	; 254
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	9f 07       	cpc	r25, r31
 442:	50 f4       	brcc	.+20     	; 0x458 <Tick_Fct+0x17c>
 444:	8b 81       	ldd	r24, Y+3	; 0x03
 446:	9c 81       	ldd	r25, Y+4	; 0x04
 448:	8d 30       	cpi	r24, 0x0D	; 13
 44a:	22 e0       	ldi	r18, 0x02	; 2
 44c:	92 07       	cpc	r25, r18
 44e:	20 f0       	brcs	.+8      	; 0x458 <Tick_Fct+0x17c>
				SM_State = move_ul;
 450:	86 e0       	ldi	r24, 0x06	; 6
 452:	80 93 0a 01 	sts	0x010A, r24
 456:	20 c0       	rjmp	.+64     	; 0x498 <Tick_Fct+0x1bc>
			}else if(input_lr > 514 && input_ud < 515){
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	9a 81       	ldd	r25, Y+2	; 0x02
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	e2 e0       	ldi	r30, 0x02	; 2
 460:	9e 07       	cpc	r25, r30
 462:	50 f0       	brcs	.+20     	; 0x478 <Tick_Fct+0x19c>
 464:	8b 81       	ldd	r24, Y+3	; 0x03
 466:	9c 81       	ldd	r25, Y+4	; 0x04
 468:	83 30       	cpi	r24, 0x03	; 3
 46a:	f2 e0       	ldi	r31, 0x02	; 2
 46c:	9f 07       	cpc	r25, r31
 46e:	20 f4       	brcc	.+8      	; 0x478 <Tick_Fct+0x19c>
				SM_State = move_dr;
 470:	89 e0       	ldi	r24, 0x09	; 9
 472:	80 93 0a 01 	sts	0x010A, r24
 476:	10 c0       	rjmp	.+32     	; 0x498 <Tick_Fct+0x1bc>
			}else if(input_lr > 514 && input_ud > 524){
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	9a 81       	ldd	r25, Y+2	; 0x02
 47c:	83 30       	cpi	r24, 0x03	; 3
 47e:	22 e0       	ldi	r18, 0x02	; 2
 480:	92 07       	cpc	r25, r18
 482:	50 f0       	brcs	.+20     	; 0x498 <Tick_Fct+0x1bc>
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	9c 81       	ldd	r25, Y+4	; 0x04
 488:	8d 30       	cpi	r24, 0x0D	; 13
 48a:	e2 e0       	ldi	r30, 0x02	; 2
 48c:	9e 07       	cpc	r25, r30
 48e:	20 f0       	brcs	.+8      	; 0x498 <Tick_Fct+0x1bc>
				SM_State = move_ur;
 490:	87 e0       	ldi	r24, 0x07	; 7
 492:	80 93 0a 01 	sts	0x010A, r24
			}
			break;			
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <Tick_Fct+0x1c4>
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <Tick_Fct+0x1c4>
			
		default:
			SM_State = init;
 49a:	10 92 0a 01 	sts	0x010A, r1
			break;
 49e:	00 00       	nop
	}
	
	switch(SM_State){ //actions
 4a0:	80 91 0a 01 	lds	r24, 0x010A
 4a4:	88 2f       	mov	r24, r24
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	aa 27       	eor	r26, r26
 4aa:	97 fd       	sbrc	r25, 7
 4ac:	a0 95       	com	r26
 4ae:	ba 2f       	mov	r27, r26
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	28 e0       	ldi	r18, 0x08	; 8
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	84 1b       	sub	r24, r20
 4ba:	95 0b       	sbc	r25, r21
 4bc:	28 17       	cp	r18, r24
 4be:	39 07       	cpc	r19, r25
 4c0:	08 f4       	brcc	.+2      	; 0x4c4 <Tick_Fct+0x1e8>
 4c2:	7a c0       	rjmp	.+244    	; 0x5b8 <Tick_Fct+0x2dc>
 4c4:	8a 5b       	subi	r24, 0xBA	; 186
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	fc 01       	movw	r30, r24
 4ca:	af c0       	rjmp	.+350    	; 0x62a <__tablejump2__>
		case wait_tilt:
			PORTB = 0x01; 
 4cc:	85 e2       	ldi	r24, 0x25	; 37
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	21 e0       	ldi	r18, 0x01	; 1
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
			//PORTD = 0x00;
			//PORTC = 0x00;
			break;
 4d6:	71 c0       	rjmp	.+226    	; 0x5ba <Tick_Fct+0x2de>
		
		case move_l:
			PORTB = 0x00;
 4d8:	85 e2       	ldi	r24, 0x25	; 37
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	fc 01       	movw	r30, r24
 4de:	10 82       	st	Z, r1
			PORTD = 0x0C; 
 4e0:	8b e2       	ldi	r24, 0x2B	; 43
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	2c e0       	ldi	r18, 0x0C	; 12
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 83       	st	Z, r18
			PORTC = 0x00;
 4ea:	88 e2       	ldi	r24, 0x28	; 40
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	fc 01       	movw	r30, r24
 4f0:	10 82       	st	Z, r1
			break;
 4f2:	63 c0       	rjmp	.+198    	; 0x5ba <Tick_Fct+0x2de>
		
		case move_r:
			PORTB = 0x00;
 4f4:	85 e2       	ldi	r24, 0x25	; 37
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	fc 01       	movw	r30, r24
 4fa:	10 82       	st	Z, r1
			PORTC = 0x0C; 
 4fc:	88 e2       	ldi	r24, 0x28	; 40
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	2c e0       	ldi	r18, 0x0C	; 12
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
			PORTD = 0x00; 
 506:	8b e2       	ldi	r24, 0x2B	; 43
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	fc 01       	movw	r30, r24
 50c:	10 82       	st	Z, r1
			break;
 50e:	55 c0       	rjmp	.+170    	; 0x5ba <Tick_Fct+0x2de>
		
		case move_u:
			PORTB = 0x00;
 510:	85 e2       	ldi	r24, 0x25	; 37
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	10 82       	st	Z, r1
			PORTC = 0xC0;
 518:	88 e2       	ldi	r24, 0x28	; 40
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	20 ec       	ldi	r18, 0xC0	; 192
 51e:	fc 01       	movw	r30, r24
 520:	20 83       	st	Z, r18
			PORTD = 0x00;  
 522:	8b e2       	ldi	r24, 0x2B	; 43
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	fc 01       	movw	r30, r24
 528:	10 82       	st	Z, r1
			break;
 52a:	47 c0       	rjmp	.+142    	; 0x5ba <Tick_Fct+0x2de>
		
		case move_d:
			PORTB = 0x00;
 52c:	85 e2       	ldi	r24, 0x25	; 37
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	fc 01       	movw	r30, r24
 532:	10 82       	st	Z, r1
			PORTD = 0xC0;
 534:	8b e2       	ldi	r24, 0x2B	; 43
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	20 ec       	ldi	r18, 0xC0	; 192
 53a:	fc 01       	movw	r30, r24
 53c:	20 83       	st	Z, r18
			PORTC = 0x00;
 53e:	88 e2       	ldi	r24, 0x28	; 40
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	fc 01       	movw	r30, r24
 544:	10 82       	st	Z, r1
			break;
 546:	39 c0       	rjmp	.+114    	; 0x5ba <Tick_Fct+0x2de>
		
		case move_ul:
			PORTB = 0x00;
 548:	85 e2       	ldi	r24, 0x25	; 37
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	fc 01       	movw	r30, r24
 54e:	10 82       	st	Z, r1
			PORTD = 0x03;
 550:	8b e2       	ldi	r24, 0x2B	; 43
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	23 e0       	ldi	r18, 0x03	; 3
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
			PORTC = 0x00;
 55a:	88 e2       	ldi	r24, 0x28	; 40
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	fc 01       	movw	r30, r24
 560:	10 82       	st	Z, r1
			break;
 562:	2b c0       	rjmp	.+86     	; 0x5ba <Tick_Fct+0x2de>
		
		case move_ur:
			PORTB = 0x00;
 564:	85 e2       	ldi	r24, 0x25	; 37
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	fc 01       	movw	r30, r24
 56a:	10 82       	st	Z, r1
			PORTC = 0x30; 
 56c:	88 e2       	ldi	r24, 0x28	; 40
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	20 e3       	ldi	r18, 0x30	; 48
 572:	fc 01       	movw	r30, r24
 574:	20 83       	st	Z, r18
			PORTD = 0x00;
 576:	8b e2       	ldi	r24, 0x2B	; 43
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	fc 01       	movw	r30, r24
 57c:	10 82       	st	Z, r1
			break;
 57e:	1d c0       	rjmp	.+58     	; 0x5ba <Tick_Fct+0x2de>
		
		case move_dl:
			PORTB = 0x00;
 580:	85 e2       	ldi	r24, 0x25	; 37
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	fc 01       	movw	r30, r24
 586:	10 82       	st	Z, r1
			PORTD = 0x30;
 588:	8b e2       	ldi	r24, 0x2B	; 43
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	20 e3       	ldi	r18, 0x30	; 48
 58e:	fc 01       	movw	r30, r24
 590:	20 83       	st	Z, r18
			PORTC = 0x00;
 592:	88 e2       	ldi	r24, 0x28	; 40
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	fc 01       	movw	r30, r24
 598:	10 82       	st	Z, r1
			break;
 59a:	0f c0       	rjmp	.+30     	; 0x5ba <Tick_Fct+0x2de>
		
		case move_dr:
			PORTB = 0x00;
 59c:	85 e2       	ldi	r24, 0x25	; 37
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	fc 01       	movw	r30, r24
 5a2:	10 82       	st	Z, r1
			PORTC = 0x03;
 5a4:	88 e2       	ldi	r24, 0x28	; 40
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	23 e0       	ldi	r18, 0x03	; 3
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
			PORTD = 0x00;
 5ae:	8b e2       	ldi	r24, 0x2B	; 43
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	fc 01       	movw	r30, r24
 5b4:	10 82       	st	Z, r1
			break;
 5b6:	01 c0       	rjmp	.+2      	; 0x5ba <Tick_Fct+0x2de>
			
		default:
			break;
 5b8:	00 00       	nop
	}
}
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <main>:

int main(void)
{
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; PORTB = 0x00;
 5d0:	84 e2       	ldi	r24, 0x24	; 36
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	2f ef       	ldi	r18, 0xFF	; 255
 5d6:	fc 01       	movw	r30, r24
 5d8:	20 83       	st	Z, r18
 5da:	85 e2       	ldi	r24, 0x25	; 37
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	fc 01       	movw	r30, r24
 5e0:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; 
 5e2:	87 e2       	ldi	r24, 0x27	; 39
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	2f ef       	ldi	r18, 0xFF	; 255
 5e8:	fc 01       	movw	r30, r24
 5ea:	20 83       	st	Z, r18
 5ec:	88 e2       	ldi	r24, 0x28	; 40
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	fc 01       	movw	r30, r24
 5f2:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00;
 5f4:	8a e2       	ldi	r24, 0x2A	; 42
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	2f ef       	ldi	r18, 0xFF	; 255
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
 5fe:	8b e2       	ldi	r24, 0x2B	; 43
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	fc 01       	movw	r30, r24
 604:	10 82       	st	Z, r1
	
	SM_State = init;
 606:	10 92 0a 01 	sts	0x010A, r1
	TimerSet(100);
 60a:	64 e6       	ldi	r22, 0x64	; 100
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	63 dd       	rcall	.-1338   	; 0xda <TimerSet>
	TimerOn();
 614:	8f dd       	rcall	.-1250   	; 0x134 <TimerOn>
	A2D_init();
 616:	2e de       	rcall	.-932    	; 0x274 <A2D_init>
	while(1)
	{
		Tick_Fct();
 618:	61 de       	rcall	.-830    	; 0x2dc <Tick_Fct>
		while(!TimerFlag){}
 61a:	00 00       	nop
 61c:	80 91 04 01 	lds	r24, 0x0104
 620:	88 23       	and	r24, r24
 622:	e1 f3       	breq	.-8      	; 0x61c <main+0x54>
		TimerFlag = 0;
 624:	10 92 04 01 	sts	0x0104, r1
	}
 628:	f7 cf       	rjmp	.-18     	; 0x618 <main+0x50>

0000062a <__tablejump2__>:
 62a:	ee 0f       	add	r30, r30
 62c:	ff 1f       	adc	r31, r31

0000062e <__tablejump__>:
 62e:	05 90       	lpm	r0, Z+
 630:	f4 91       	lpm	r31, Z
 632:	e0 2d       	mov	r30, r0
 634:	09 94       	ijmp

00000636 <_exit>:
 636:	f8 94       	cli

00000638 <__stop_program>:
 638:	ff cf       	rjmp	.-2      	; 0x638 <__stop_program>

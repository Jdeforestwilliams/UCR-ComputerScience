
DistanceTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000029c  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  00000334  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002fd  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001cc  00000000  00000000  000006b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  0000087d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022c  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ff  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000f07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7f d0       	rcall	.+254    	; 0x1c2 <main>
  c4:	e9 c0       	rjmp	.+466    	; 0x298 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25
  d6:	80 93 88 00 	sts	0x0088, r24
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24
  e0:	10 92 85 00 	sts	0x0085, r1
  e4:	10 92 84 00 	sts	0x0084, r1
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	90 91 01 01 	lds	r25, 0x0101
  f0:	a0 91 02 01 	lds	r26, 0x0102
  f4:	b0 91 03 01 	lds	r27, 0x0103
  f8:	80 93 04 01 	sts	0x0104, r24
  fc:	90 93 05 01 	sts	0x0105, r25
 100:	a0 93 06 01 	sts	0x0106, r26
 104:	b0 93 07 01 	sts	0x0107, r27
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

ISR(TIMER1_COMPA_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 122:	80 91 04 01 	lds	r24, 0x0104
 126:	90 91 05 01 	lds	r25, 0x0105
 12a:	a0 91 06 01 	lds	r26, 0x0106
 12e:	b0 91 07 01 	lds	r27, 0x0107
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 04 01 	sts	0x0104, r24
 13c:	90 93 05 01 	sts	0x0105, r25
 140:	a0 93 06 01 	sts	0x0106, r26
 144:	b0 93 07 01 	sts	0x0107, r27
	if (_avr_timer_cntcurr == 0) {
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 08 01 	sts	0x0108, r24
ISR(TIMER1_COMPA_vect)
{
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100
 15a:	90 91 01 01 	lds	r25, 0x0101
 15e:	a0 91 02 01 	lds	r26, 0x0102
 162:	b0 91 03 01 	lds	r27, 0x0103
 166:	80 93 04 01 	sts	0x0104, r24
 16a:	90 93 05 01 	sts	0x0105, r25
 16e:	a0 93 06 01 	sts	0x0106, r26
 172:	b0 93 07 01 	sts	0x0107, r27
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <read_ultrasonic>:
	}
}

int read_ultrasonic(){
	int count = 0;
	PORTB = 0x00;		// Ping all ultrasonic for 10 us
 188:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	85 e3       	ldi	r24, 0x35	; 53
 18c:	8a 95       	dec	r24
 18e:	f1 f7       	brne	.-4      	; 0x18c <read_ultrasonic+0x4>
 190:	00 00       	nop
	_delay_us(10);		     //
	PORTB = 0xFF;		// Set port A to LOW
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f e9       	ldi	r24, 0x9F	; 159
 198:	9f e0       	ldi	r25, 0x0F	; 15
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <read_ultrasonic+0x12>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <read_ultrasonic+0x18>
 1a0:	00 00       	nop
 1a2:	20 e1       	ldi	r18, 0x10	; 16
 1a4:	37 e2       	ldi	r19, 0x27	; 39
		TimerFlag = 0;
	}
}

int read_ultrasonic(){
	int count = 0;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
	PORTB = 0xFF;		// Set port A to LOW

	_delay_ms(1);		     // delay to wait for transmitter to die off
	for (int i=0;i < 10000;i++){ // Checking port in loop 10,000 times

		if (~PIND&0x40){	     // read PORTF pin 5 for echo pulse
 1aa:	4e 9b       	sbis	0x09, 6	; 9
			count++;	// count if still high count
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	31 09       	sbc	r19, r1
	PORTB = 0x00;		// Ping all ultrasonic for 10 us
	_delay_us(10);		     //
	PORTB = 0xFF;		// Set port A to LOW

	_delay_ms(1);		     // delay to wait for transmitter to die off
	for (int i=0;i < 10000;i++){ // Checking port in loop 10,000 times
 1b2:	21 15       	cp	r18, r1
 1b4:	31 05       	cpc	r19, r1
 1b6:	c9 f7       	brne	.-14     	; 0x1aa <read_ultrasonic+0x22>
		if (~PIND&0x40){	     // read PORTF pin 5 for echo pulse
			count++;	// count if still high count
		}
	}

	return count/58;
 1b8:	6a e3       	ldi	r22, 0x3A	; 58
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	46 d0       	rcall	.+140    	; 0x24a <__divmodhi4>
 1be:	cb 01       	movw	r24, r22
}
 1c0:	08 95       	ret

000001c2 <main>:

int read_ultrasonic();

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00; // Configure port A's 8 pins as inputs
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	81 b9       	out	0x01, r24	; 1
 1c6:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 1c8:	84 b9       	out	0x04, r24	; 4
 1ca:	15 b8       	out	0x05, r1	; 5
	DDRD = 0x00; PORTD = 0x00;
 1cc:	1a b8       	out	0x0a, r1	; 10
 1ce:	1b b8       	out	0x0b, r1	; 11

unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 1d0:	82 e3       	ldi	r24, 0x32	; 50
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	a0 e0       	ldi	r26, 0x00	; 0
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	80 93 00 01 	sts	0x0100, r24
 1dc:	90 93 01 01 	sts	0x0101, r25
 1e0:	a0 93 02 01 	sts	0x0102, r26
 1e4:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 1e8:	80 93 04 01 	sts	0x0104, r24
 1ec:	90 93 05 01 	sts	0x0105, r25
 1f0:	a0 93 06 01 	sts	0x0106, r26
 1f4:	b0 93 07 01 	sts	0x0107, r27
	DDRA = 0xFF; PORTA = 0x00; // Configure port A's 8 pins as inputs
	DDRB = 0xFF; PORTB = 0x00;
	DDRD = 0x00; PORTD = 0x00;
	short distance = 0; 
	TimerSet(50);
	TimerOn();
 1f8:	67 df       	rcall	.-306    	; 0xc8 <TimerOn>
		}
		else if (distance >= 90 && distance < 120){
			PORTA = 0x08;		
		}
		else {
			PORTA = 0x02; 
 1fa:	d2 e0       	ldi	r29, 0x02	; 2
		}
		else if (distance >= 60 && distance < 90){
			PORTA = 0x04;
		}
		else if (distance >= 90 && distance < 120){
			PORTA = 0x08;		
 1fc:	08 e0       	ldi	r16, 0x08	; 8
		}
		else if ( distance >= 30 && distance < 60) {
			PORTA = 0x02; 
		}
		else if (distance >= 60 && distance < 90){
			PORTA = 0x04;
 1fe:	14 e0       	ldi	r17, 0x04	; 4
	TimerOn();
	while(1){
		distance = read_ultrasonic();
		//sdistance = distance/58; 
		if (distance < 30){
			PORTA = 0x01; 
 200:	c1 e0       	ldi	r28, 0x01	; 1
	DDRD = 0x00; PORTD = 0x00;
	short distance = 0; 
	TimerSet(50);
	TimerOn();
	while(1){
		distance = read_ultrasonic();
 202:	c2 df       	rcall	.-124    	; 0x188 <read_ultrasonic>
		//sdistance = distance/58; 
		if (distance < 30){
 204:	8e 31       	cpi	r24, 0x1E	; 30
 206:	91 05       	cpc	r25, r1
 208:	14 f4       	brge	.+4      	; 0x20e <main+0x4c>
			PORTA = 0x01; 
 20a:	c2 b9       	out	0x02, r28	; 2
 20c:	17 c0       	rjmp	.+46     	; 0x23c <main+0x7a>
		}
		else if ( distance >= 30 && distance < 60) {
 20e:	9c 01       	movw	r18, r24
 210:	2e 51       	subi	r18, 0x1E	; 30
 212:	31 09       	sbc	r19, r1
 214:	2e 31       	cpi	r18, 0x1E	; 30
 216:	31 05       	cpc	r19, r1
 218:	10 f4       	brcc	.+4      	; 0x21e <main+0x5c>
			PORTA = 0x02; 
 21a:	d2 b9       	out	0x02, r29	; 2
 21c:	0f c0       	rjmp	.+30     	; 0x23c <main+0x7a>
		}
		else if (distance >= 60 && distance < 90){
 21e:	9c 01       	movw	r18, r24
 220:	2c 53       	subi	r18, 0x3C	; 60
 222:	31 09       	sbc	r19, r1
 224:	2e 31       	cpi	r18, 0x1E	; 30
 226:	31 05       	cpc	r19, r1
 228:	10 f4       	brcc	.+4      	; 0x22e <main+0x6c>
			PORTA = 0x04;
 22a:	12 b9       	out	0x02, r17	; 2
 22c:	07 c0       	rjmp	.+14     	; 0x23c <main+0x7a>
		}
		else if (distance >= 90 && distance < 120){
 22e:	8a 55       	subi	r24, 0x5A	; 90
 230:	91 09       	sbc	r25, r1
 232:	4e 97       	sbiw	r24, 0x1e	; 30
 234:	10 f4       	brcc	.+4      	; 0x23a <main+0x78>
			PORTA = 0x08;		
 236:	02 b9       	out	0x02, r16	; 2
 238:	01 c0       	rjmp	.+2      	; 0x23c <main+0x7a>
		}
		else {
			PORTA = 0x02; 
 23a:	d2 b9       	out	0x02, r29	; 2
		}
		while(!TimerFlag);
 23c:	80 91 08 01 	lds	r24, 0x0108
 240:	88 23       	and	r24, r24
 242:	e1 f3       	breq	.-8      	; 0x23c <main+0x7a>
		TimerFlag = 0;
 244:	10 92 08 01 	sts	0x0108, r1
	}
 248:	dc cf       	rjmp	.-72     	; 0x202 <main+0x40>

0000024a <__divmodhi4>:
 24a:	97 fb       	bst	r25, 7
 24c:	07 2e       	mov	r0, r23
 24e:	16 f4       	brtc	.+4      	; 0x254 <__divmodhi4+0xa>
 250:	00 94       	com	r0
 252:	06 d0       	rcall	.+12     	; 0x260 <__divmodhi4_neg1>
 254:	77 fd       	sbrc	r23, 7
 256:	08 d0       	rcall	.+16     	; 0x268 <__divmodhi4_neg2>
 258:	0b d0       	rcall	.+22     	; 0x270 <__udivmodhi4>
 25a:	07 fc       	sbrc	r0, 7
 25c:	05 d0       	rcall	.+10     	; 0x268 <__divmodhi4_neg2>
 25e:	3e f4       	brtc	.+14     	; 0x26e <__divmodhi4_exit>

00000260 <__divmodhi4_neg1>:
 260:	90 95       	com	r25
 262:	81 95       	neg	r24
 264:	9f 4f       	sbci	r25, 0xFF	; 255
 266:	08 95       	ret

00000268 <__divmodhi4_neg2>:
 268:	70 95       	com	r23
 26a:	61 95       	neg	r22
 26c:	7f 4f       	sbci	r23, 0xFF	; 255

0000026e <__divmodhi4_exit>:
 26e:	08 95       	ret

00000270 <__udivmodhi4>:
 270:	aa 1b       	sub	r26, r26
 272:	bb 1b       	sub	r27, r27
 274:	51 e1       	ldi	r21, 0x11	; 17
 276:	07 c0       	rjmp	.+14     	; 0x286 <__udivmodhi4_ep>

00000278 <__udivmodhi4_loop>:
 278:	aa 1f       	adc	r26, r26
 27a:	bb 1f       	adc	r27, r27
 27c:	a6 17       	cp	r26, r22
 27e:	b7 07       	cpc	r27, r23
 280:	10 f0       	brcs	.+4      	; 0x286 <__udivmodhi4_ep>
 282:	a6 1b       	sub	r26, r22
 284:	b7 0b       	sbc	r27, r23

00000286 <__udivmodhi4_ep>:
 286:	88 1f       	adc	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	5a 95       	dec	r21
 28c:	a9 f7       	brne	.-22     	; 0x278 <__udivmodhi4_loop>
 28e:	80 95       	com	r24
 290:	90 95       	com	r25
 292:	bc 01       	movw	r22, r24
 294:	cd 01       	movw	r24, r26
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>

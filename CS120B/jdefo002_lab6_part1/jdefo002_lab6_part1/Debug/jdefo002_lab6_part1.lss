
jdefo002_lab6_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000002ce  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800066  00800066  00000368  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000082  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000050  00000000  00000000  00000ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000018c  00000000  00000000  00000b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000103  00000000  00000000  00000cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000016b  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000138  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000146  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000260  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 40 01 	call	0x280	; 0x280 <main>
  8a:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerOn>:
#include <avr/interrupt.h>
volatile unsigned char TimerFlag=0; // TimerISR() sets this to 1. C programmer should clear to 0.
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M=1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr=0; // Current internal count of 1ms ticks
void TimerOn() {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	// AVR timer/counter controller register TCCR0
	TCCR0 = 0x0B;    // bit3bit6=10: CTC mode (clear timer on compare)
  9a:	83 e5       	ldi	r24, 0x53	; 83
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	2b e0       	ldi	r18, 0x0B	; 11
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	// bit2bit1bit0=011: pre-scaler /64
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT0 register will count at 125,000 ticks/s
	// AVR output compare register OCR0.
	OCR0 = 125;    // Timer interrupt will be generated when TCNT0==OCR0
  a4:	8c e5       	ldi	r24, 0x5C	; 92
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	2d e7       	ldi	r18, 0x7D	; 125
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT0 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register
	TIMSK = 0x02; // bit1: OCIE0 -- enables compare match interrupt
  ae:	89 e5       	ldi	r24, 0x59	; 89
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	//Initialize avr counter
	TCNT0=0;
  b8:	82 e5       	ldi	r24, 0x52	; 82
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	fc 01       	movw	r30, r24
  be:	10 82       	st	Z, r1
	_avr_timer_cntcurr = _avr_timer_M;
  c0:	80 91 60 00 	lds	r24, 0x0060
  c4:	90 91 61 00 	lds	r25, 0x0061
  c8:	a0 91 62 00 	lds	r26, 0x0062
  cc:	b0 91 63 00 	lds	r27, 0x0063
  d0:	80 93 67 00 	sts	0x0067, r24
  d4:	90 93 68 00 	sts	0x0068, r25
  d8:	a0 93 69 00 	sts	0x0069, r26
  dc:	b0 93 6a 00 	sts	0x006A, r27
	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
  e0:	8f e5       	ldi	r24, 0x5F	; 95
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	2f e5       	ldi	r18, 0x5F	; 95
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	20 81       	ld	r18, Z
  ec:	20 68       	ori	r18, 0x80	; 128
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <TimerISR>:
void TimerOff() {
	TCCR0 = 0x00; // bit2bit1bit0=000: timer off
}
void TimerISR(){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 66 00 	sts	0x0066, r24
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <__vector_10>:
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER0_COMP_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	00 90 5f 00 	lds	r0, 0x005F
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 138:	80 91 67 00 	lds	r24, 0x0067
 13c:	90 91 68 00 	lds	r25, 0x0068
 140:	a0 91 69 00 	lds	r26, 0x0069
 144:	b0 91 6a 00 	lds	r27, 0x006A
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	a1 09       	sbc	r26, r1
 14c:	b1 09       	sbc	r27, r1
 14e:	80 93 67 00 	sts	0x0067, r24
 152:	90 93 68 00 	sts	0x0068, r25
 156:	a0 93 69 00 	sts	0x0069, r26
 15a:	b0 93 6a 00 	sts	0x006A, r27
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 15e:	80 91 67 00 	lds	r24, 0x0067
 162:	90 91 68 00 	lds	r25, 0x0068
 166:	a0 91 69 00 	lds	r26, 0x0069
 16a:	b0 91 6a 00 	lds	r27, 0x006A
 16e:	00 97       	sbiw	r24, 0x00	; 0
 170:	a1 05       	cpc	r26, r1
 172:	b1 05       	cpc	r27, r1
 174:	91 f4       	brne	.+36     	; 0x19a <__vector_10+0x8e>
		TimerISR(); // Call the ISR that the user uses
 176:	0e 94 7c 00 	call	0xf8	; 0xf8 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 17a:	80 91 60 00 	lds	r24, 0x0060
 17e:	90 91 61 00 	lds	r25, 0x0061
 182:	a0 91 62 00 	lds	r26, 0x0062
 186:	b0 91 63 00 	lds	r27, 0x0063
 18a:	80 93 67 00 	sts	0x0067, r24
 18e:	90 93 68 00 	sts	0x0068, r25
 192:	a0 93 69 00 	sts	0x0069, r26
 196:	b0 93 6a 00 	sts	0x006A, r27
	}
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	7f 91       	pop	r23
 1ac:	6f 91       	pop	r22
 1ae:	5f 91       	pop	r21
 1b0:	4f 91       	pop	r20
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	00 92 5f 00 	sts	0x005F, r0
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <TimerSet>:
// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <TimerSet+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <TimerSet+0x8>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	69 83       	std	Y+1, r22	; 0x01
 1d0:	7a 83       	std	Y+2, r23	; 0x02
 1d2:	8b 83       	std	Y+3, r24	; 0x03
 1d4:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	ab 81       	ldd	r26, Y+3	; 0x03
 1dc:	bc 81       	ldd	r27, Y+4	; 0x04
 1de:	80 93 60 00 	sts	0x0060, r24
 1e2:	90 93 61 00 	sts	0x0061, r25
 1e6:	a0 93 62 00 	sts	0x0062, r26
 1ea:	b0 93 63 00 	sts	0x0063, r27
	_avr_timer_cntcurr = _avr_timer_M;
 1ee:	80 91 60 00 	lds	r24, 0x0060
 1f2:	90 91 61 00 	lds	r25, 0x0061
 1f6:	a0 91 62 00 	lds	r26, 0x0062
 1fa:	b0 91 63 00 	lds	r27, 0x0063
 1fe:	80 93 67 00 	sts	0x0067, r24
 202:	90 93 68 00 	sts	0x0068, r25
 206:	a0 93 69 00 	sts	0x0069, r26
 20a:	b0 93 6a 00 	sts	0x006A, r27
}
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <TckFct_Counter>:
volatile unsigned char B = 0x01;
enum Counter_States { InitState } CounterState;
unsigned char TckFct_Counter()
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	// Variable we are returning
	switch(CounterState)
 224:	80 91 6b 00 	lds	r24, 0x006B
 228:	90 91 6c 00 	lds	r25, 0x006C
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	d1 f4       	brne	.+52     	; 0x264 <TckFct_Counter+0x48>
	{
		//Transitions
		case InitState:  // Initial Transition
		if ( B < 4)
 230:	80 91 64 00 	lds	r24, 0x0064
 234:	84 30       	cpi	r24, 0x04	; 4
 236:	50 f4       	brcc	.+20     	; 0x24c <TckFct_Counter+0x30>
		{
			B = B<<1;
 238:	80 91 64 00 	lds	r24, 0x0064
 23c:	88 0f       	add	r24, r24
 23e:	80 93 64 00 	sts	0x0064, r24
			CounterState = InitState;
 242:	10 92 6c 00 	sts	0x006C, r1
 246:	10 92 6b 00 	sts	0x006B, r1
		else if (!(B<4))
		{
			B = 0x01;
			CounterState = InitState;
		}
		break;
 24a:	0d c0       	rjmp	.+26     	; 0x266 <TckFct_Counter+0x4a>
		if ( B < 4)
		{
			B = B<<1;
			CounterState = InitState;
		}
		else if (!(B<4))
 24c:	80 91 64 00 	lds	r24, 0x0064
 250:	84 30       	cpi	r24, 0x04	; 4
 252:	48 f0       	brcs	.+18     	; 0x266 <TckFct_Counter+0x4a>
		{
			B = 0x01;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 64 00 	sts	0x0064, r24
			CounterState = InitState;
 25a:	10 92 6c 00 	sts	0x006C, r1
 25e:	10 92 6b 00 	sts	0x006B, r1
		}
		break;
 262:	01 c0       	rjmp	.+2      	; 0x266 <TckFct_Counter+0x4a>
		default:
		break;
 264:	01 c0       	rjmp	.+2      	; 0x268 <TckFct_Counter+0x4c>
		else if (!(B<4))
		{
			B = 0x01;
			CounterState = InitState;
		}
		break;
 266:	00 00       	nop
		default:
		break;
	}
	
	switch(CounterState)
 268:	80 91 6b 00 	lds	r24, 0x006B
 26c:	90 91 6c 00 	lds	r25, 0x006C
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	11 f0       	breq	.+4      	; 0x278 <TckFct_Counter+0x5c>
	{ // Actions
		case InitState:
		break;
		default:
		break;
 274:	00 00       	nop
 276:	01 c0       	rjmp	.+2      	; 0x27a <TckFct_Counter+0x5e>
	}
	
	switch(CounterState)
	{ // Actions
		case InitState:
		break;
 278:	00 00       	nop
		default:
		break;
	}
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <main>:
int main(void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; // Set port B to output
 288:	87 e3       	ldi	r24, 0x37	; 55
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	2f ef       	ldi	r18, 0xFF	; 255
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
	PORTB = 0x00; // Init port B to 0s
 292:	88 e3       	ldi	r24, 0x38	; 56
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	fc 01       	movw	r30, r24
 298:	10 82       	st	Z, r1
	TimerSet(1000);
 29a:	68 ee       	ldi	r22, 0xE8	; 232
 29c:	73 e0       	ldi	r23, 0x03	; 3
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <TimerSet>
	TimerOn();
 2a6:	0e 94 49 00 	call	0x92	; 0x92 <TimerOn>
	while(1) {
		// User code
		TckFct_Counter();
 2aa:	0e 94 0e 01 	call	0x21c	; 0x21c <TckFct_Counter>
		PORTB = B;
 2ae:	88 e3       	ldi	r24, 0x38	; 56
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	20 91 64 00 	lds	r18, 0x0064
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
		while (!TimerFlag);    // Wait 1 sec
 2ba:	00 00       	nop
 2bc:	80 91 66 00 	lds	r24, 0x0066
 2c0:	88 23       	and	r24, r24
 2c2:	e1 f3       	breq	.-8      	; 0x2bc <main+0x3c>
		TimerFlag = 0;
 2c4:	10 92 66 00 	sts	0x0066, r1
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
	}
 2c8:	f0 cf       	rjmp	.-32     	; 0x2aa <main+0x2a>

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>

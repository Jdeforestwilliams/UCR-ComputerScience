
led_matrix_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c4  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000e2  00000000  00000000  000008d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000089  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000fe  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ce  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000041  00000000  00000000  00000c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


#include <avr/io.h>

int main(void)
{	unsigned char A = 0;
  6c:	80 e0       	ldi	r24, 0x00	; 0
		unsigned char C_two = (PINC & 0x04);
		unsigned char C_three = (PINC & 0x08);
		unsigned char C_four = (PINC & 0x10);
        if (C_zero)
		{
			A = 0x70;
  6e:	b0 e7       	ldi	r27, 0x70	; 112
		}
        if (C_one)
        {
	        A = 0x71;
  70:	a1 e7       	ldi	r26, 0x71	; 113
        }
        if (C_two)
        {
	        A = 0x72;
  72:	f2 e7       	ldi	r31, 0x72	; 114
        }				
        if (C_three)
        {
	        A = 0x73;
  74:	e3 e7       	ldi	r30, 0x73	; 115
        }
        if (C_four)
        {
	        A = 0x74;
  76:	74 e7       	ldi	r23, 0x74	; 116
		if (C_zero || C_one || C_two || C_three || C_four)
		{
			PORTA = A;     
		}		
		else {
			PORTA = 0xFF; 
  78:	cf ef       	ldi	r28, 0xFF	; 255

int main(void)
{	unsigned char A = 0;
    while(1)
    {
		unsigned char C_zero = (PINC & 0x01);
  7a:	93 b3       	in	r25, 0x13	; 19
		unsigned char C_one = (PINC & 0x02);
  7c:	23 b3       	in	r18, 0x13	; 19
  7e:	22 70       	andi	r18, 0x02	; 2
		unsigned char C_two = (PINC & 0x04);
  80:	33 b3       	in	r19, 0x13	; 19
  82:	34 70       	andi	r19, 0x04	; 4
		unsigned char C_three = (PINC & 0x08);
  84:	43 b3       	in	r20, 0x13	; 19
  86:	48 70       	andi	r20, 0x08	; 8
		unsigned char C_four = (PINC & 0x10);
  88:	53 b3       	in	r21, 0x13	; 19
  8a:	50 71       	andi	r21, 0x10	; 16
        if (C_zero)
  8c:	69 2f       	mov	r22, r25
  8e:	61 70       	andi	r22, 0x01	; 1
  90:	90 fd       	sbrc	r25, 0
		{
			A = 0x70;
  92:	8b 2f       	mov	r24, r27
		}
        if (C_one)
  94:	21 11       	cpse	r18, r1
        {
	        A = 0x71;
  96:	8a 2f       	mov	r24, r26
        }
        if (C_two)
  98:	31 11       	cpse	r19, r1
        {
	        A = 0x72;
  9a:	8f 2f       	mov	r24, r31
        }				
        if (C_three)
  9c:	41 11       	cpse	r20, r1
        {
	        A = 0x73;
  9e:	8e 2f       	mov	r24, r30
        }
        if (C_four)
  a0:	51 11       	cpse	r21, r1
        {
	        A = 0x74;
  a2:	87 2f       	mov	r24, r23
        }	
		if (C_zero || C_one || C_two || C_three || C_four)
  a4:	61 11       	cpse	r22, r1
  a6:	08 c0       	rjmp	.+16     	; 0xb8 <main+0x4c>
  a8:	21 11       	cpse	r18, r1
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <main+0x4c>
  ac:	31 11       	cpse	r19, r1
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <main+0x4c>
  b0:	41 11       	cpse	r20, r1
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x4c>
  b4:	55 23       	and	r21, r21
  b6:	11 f0       	breq	.+4      	; 0xbc <main+0x50>
		{
			PORTA = A;     
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	df cf       	rjmp	.-66     	; 0x7a <main+0xe>
		}		
		else {
			PORTA = 0xFF; 
  bc:	cb bb       	out	0x1b, r28	; 27
  be:	dd cf       	rjmp	.-70     	; 0x7a <main+0xe>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>


jdefo002_lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000a0  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000114  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000891  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000114  00000000  00000000  000008c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000a4  00000000  00000000  000009d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000010c  00000000  00000000  00000a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000b4  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b6  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000d36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GetBit>:
// Bit-access functions
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	02 c0       	rjmp	.+4      	; 0x74 <GetBit+0x8>
  70:	95 95       	asr	r25
  72:	87 95       	ror	r24
  74:	6a 95       	dec	r22
  76:	e2 f7       	brpl	.-8      	; 0x70 <GetBit+0x4>
}
  78:	81 70       	andi	r24, 0x01	; 1
  7a:	08 95       	ret

0000007c <main>:

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Config port A as inputs, init 1s
  7c:	1a ba       	out	0x1a, r1	; 26
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF; PORTC = 0x00; // Config port C as outputs, init 0s
  82:	84 bb       	out	0x14, r24	; 20
  84:	15 ba       	out	0x15, r1	; 21
	while(1)
	{
		// if PA0 is 1, set PB1PB0=01, else =10
		if (GetBit(PINA,0)==0) { // Button pressed
			PORTC = 0x7F; // PC6..PC0 all 1s; lights all 7 segments
  86:	cf e7       	ldi	r28, 0x7F	; 127
	DDRA = 0x00; PORTA = 0xFF; // Config port A as inputs, init 1s
	DDRC = 0xFF; PORTC = 0x00; // Config port C as outputs, init 0s
	while(1)
	{
		// if PA0 is 1, set PB1PB0=01, else =10
		if (GetBit(PINA,0)==0) { // Button pressed
  88:	89 b3       	in	r24, 0x19	; 25
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <GetBit>
  90:	81 11       	cpse	r24, r1
  92:	02 c0       	rjmp	.+4      	; 0x98 <main+0x1c>
			PORTC = 0x7F; // PC6..PC0 all 1s; lights all 7 segments
  94:	c5 bb       	out	0x15, r28	; 21
  96:	f8 cf       	rjmp	.-16     	; 0x88 <main+0xc>
		}
		else {
			PORTC = 0x00; // Turn off all 7 segments
  98:	15 ba       	out	0x15, r1	; 21
  9a:	f6 cf       	rjmp	.-20     	; 0x88 <main+0xc>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>

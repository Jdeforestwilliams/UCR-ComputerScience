
jdefo002_lab3_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000002c6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000082  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  00000a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000024d  00000000  00000000  00000a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000e3  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000016a  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000126  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000021  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  0000109b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  74:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GetBit>:
#define CLEAR_PORT_BIT(OUTPORT, BIT)	OUTPORT &= ~(1 << BIT)

unsigned char count = 0;
 unsigned char flag = 0;
unsigned char GetBit(unsigned char x, unsigned char k) {
   return ((x & (0x01 << k)) != 0);
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <GetBit+0x8>
  80:	95 95       	asr	r25
  82:	87 95       	ror	r24
  84:	6a 95       	dec	r22
  86:	e2 f7       	brpl	.-8      	; 0x80 <GetBit+0x4>
}
  88:	81 70       	andi	r24, 0x01	; 1
  8a:	08 95       	ret

0000008c <TickFct_CNT>:

enum COUNT_States{Init, Increment ,Decrement, waiting, both}
      COUNT_State;

void TickFct_CNT(){
   switch (COUNT_State){ // Transitions
  8c:	80 91 62 00 	lds	r24, 0x0062
  90:	82 30       	cpi	r24, 0x02	; 2
  92:	09 f4       	brne	.+2      	; 0x96 <TickFct_CNT+0xa>
  94:	40 c0       	rjmp	.+128    	; 0x116 <TickFct_CNT+0x8a>
  96:	30 f4       	brcc	.+12     	; 0xa4 <TickFct_CNT+0x18>
  98:	88 23       	and	r24, r24
  9a:	59 f0       	breq	.+22     	; 0xb2 <TickFct_CNT+0x26>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	09 f0       	breq	.+2      	; 0xa2 <TickFct_CNT+0x16>
  a0:	87 c0       	rjmp	.+270    	; 0x1b0 <TickFct_CNT+0x124>
  a2:	1e c0       	rjmp	.+60     	; 0xe0 <TickFct_CNT+0x54>
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	09 f4       	brne	.+2      	; 0xaa <TickFct_CNT+0x1e>
  a8:	51 c0       	rjmp	.+162    	; 0x14c <TickFct_CNT+0xc0>
  aa:	84 30       	cpi	r24, 0x04	; 4
  ac:	09 f0       	breq	.+2      	; 0xb0 <TickFct_CNT+0x24>
  ae:	80 c0       	rjmp	.+256    	; 0x1b0 <TickFct_CNT+0x124>
  b0:	aa c0       	rjmp	.+340    	; 0x206 <TickFct_CNT+0x17a>
      case Init:
         if (GetBit (INPUT_INPORT,0) && count < 9){
  b2:	89 b3       	in	r24, 0x19	; 25
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
  ba:	88 23       	and	r24, r24
  bc:	29 f0       	breq	.+10     	; 0xc8 <TickFct_CNT+0x3c>
  be:	80 91 61 00 	lds	r24, 0x0061
  c2:	89 30       	cpi	r24, 0x09	; 9
  c4:	08 f4       	brcc	.+2      	; 0xc8 <TickFct_CNT+0x3c>
  c6:	84 c0       	rjmp	.+264    	; 0x1d0 <TickFct_CNT+0x144>
            COUNT_State = Increment; //Initial State
         }
         else if (GetBit (INPUT_INPORT,1)&& count > 0)
  c8:	89 b3       	in	r24, 0x19	; 25
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
  d0:	88 23       	and	r24, r24
  d2:	09 f4       	brne	.+2      	; 0xd6 <TickFct_CNT+0x4a>
  d4:	9e c0       	rjmp	.+316    	; 0x212 <TickFct_CNT+0x186>
  d6:	80 91 61 00 	lds	r24, 0x0061
  da:	81 11       	cpse	r24, r1
  dc:	85 c0       	rjmp	.+266    	; 0x1e8 <TickFct_CNT+0x15c>
  de:	08 95       	ret
         {
            COUNT_State = Init;
         }
         break;
      case Increment:
         if (GetBit (INPUT_INPORT,0)&& GetBit (INPUT_INPORT,1))
  e0:	89 b3       	in	r24, 0x19	; 25
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
  e8:	88 23       	and	r24, r24
  ea:	31 f0       	breq	.+12     	; 0xf8 <TickFct_CNT+0x6c>
  ec:	89 b3       	in	r24, 0x19	; 25
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
  f4:	81 11       	cpse	r24, r1
  f6:	87 c0       	rjmp	.+270    	; 0x206 <TickFct_CNT+0x17a>
         {
            COUNT_State = both;
         }
		 else if (GetBit(INPUT_INPORT,0) && !flag)
  f8:	89 b3       	in	r24, 0x19	; 25
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 100:	88 23       	and	r24, r24
 102:	29 f0       	breq	.+10     	; 0x10e <TickFct_CNT+0x82>
 104:	80 91 60 00 	lds	r24, 0x0060
 108:	88 23       	and	r24, r24
 10a:	09 f4       	brne	.+2      	; 0x10e <TickFct_CNT+0x82>
 10c:	61 c0       	rjmp	.+194    	; 0x1d0 <TickFct_CNT+0x144>
		 {
			 COUNT_State = Increment;
		 }
         else
         {
             COUNT_State = waiting;
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	80 93 62 00 	sts	0x0062, r24
 114:	75 c0       	rjmp	.+234    	; 0x200 <TickFct_CNT+0x174>
         }

         break;
      case Decrement:
         if (GetBit (INPUT_INPORT,0)&& GetBit (INPUT_INPORT,1))
 116:	89 b3       	in	r24, 0x19	; 25
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 11e:	88 23       	and	r24, r24
 120:	31 f0       	breq	.+12     	; 0x12e <TickFct_CNT+0xa2>
 122:	89 b3       	in	r24, 0x19	; 25
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 12a:	81 11       	cpse	r24, r1
 12c:	6c c0       	rjmp	.+216    	; 0x206 <TickFct_CNT+0x17a>
         {
            COUNT_State = both;
         }
		else if (GetBit(INPUT_INPORT,1) && !flag)
 12e:	89 b3       	in	r24, 0x19	; 25
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 136:	88 23       	and	r24, r24
 138:	29 f0       	breq	.+10     	; 0x144 <TickFct_CNT+0xb8>
 13a:	80 91 60 00 	lds	r24, 0x0060
 13e:	88 23       	and	r24, r24
 140:	09 f4       	brne	.+2      	; 0x144 <TickFct_CNT+0xb8>
 142:	52 c0       	rjmp	.+164    	; 0x1e8 <TickFct_CNT+0x15c>
		{
			COUNT_State = Decrement; 
		}
         else
         {
            COUNT_State = waiting;
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	80 93 62 00 	sts	0x0062, r24
 14a:	5a c0       	rjmp	.+180    	; 0x200 <TickFct_CNT+0x174>
         }

         break;

       case waiting:
         if (GetBit (INPUT_INPORT,0)&& GetBit (INPUT_INPORT,1))
 14c:	89 b3       	in	r24, 0x19	; 25
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 154:	88 23       	and	r24, r24
 156:	49 f0       	breq	.+18     	; 0x16a <TickFct_CNT+0xde>
 158:	89 b3       	in	r24, 0x19	; 25
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 160:	88 23       	and	r24, r24
 162:	19 f0       	breq	.+6      	; 0x16a <TickFct_CNT+0xde>
         {
            COUNT_State = both;
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	80 93 62 00 	sts	0x0062, r24
         }

         if (GetBit (INPUT_INPORT, 0))
 16a:	89 b3       	in	r24, 0x19	; 25
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 172:	88 23       	and	r24, r24
 174:	21 f0       	breq	.+8      	; 0x17e <TickFct_CNT+0xf2>
         {
            COUNT_State = waiting;
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	80 93 62 00 	sts	0x0062, r24
 17c:	41 c0       	rjmp	.+130    	; 0x200 <TickFct_CNT+0x174>
         }
         else if (GetBit (INPUT_INPORT,1))
 17e:	89 b3       	in	r24, 0x19	; 25
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 186:	88 23       	and	r24, r24
 188:	21 f0       	breq	.+8      	; 0x192 <TickFct_CNT+0x106>
         {
            COUNT_State = waiting;
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	80 93 62 00 	sts	0x0062, r24
 190:	37 c0       	rjmp	.+110    	; 0x200 <TickFct_CNT+0x174>
         }
         else if (!GetBit (INPUT_INPORT,0) && !GetBit (INPUT_INPORT,1))
 192:	89 b3       	in	r24, 0x19	; 25
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 19a:	81 11       	cpse	r24, r1
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <TickFct_CNT+0x12a>
 19e:	89 b3       	in	r24, 0x19	; 25
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 1a6:	81 11       	cpse	r24, r1
 1a8:	06 c0       	rjmp	.+12     	; 0x1b6 <TickFct_CNT+0x12a>
         {
            COUNT_State = Init;
 1aa:	10 92 62 00 	sts	0x0062, r1
 1ae:	08 95       	ret
         break;
       case both:
         COUNT_State = both;
         break;
       default:
         COUNT_State =Init;
 1b0:	10 92 62 00 	sts	0x0062, r1
         break;
 1b4:	08 95       	ret
   }	
   switch (COUNT_State){ //State Actions
 1b6:	80 91 62 00 	lds	r24, 0x0062
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	a9 f0       	breq	.+42     	; 0x1e8 <TickFct_CNT+0x15c>
 1be:	18 f4       	brcc	.+6      	; 0x1c6 <TickFct_CNT+0x13a>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	39 f5       	brne	.+78     	; 0x212 <TickFct_CNT+0x186>
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <TickFct_CNT+0x144>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	d9 f0       	breq	.+54     	; 0x200 <TickFct_CNT+0x174>
 1ca:	84 30       	cpi	r24, 0x04	; 4
 1cc:	11 f5       	brne	.+68     	; 0x212 <TickFct_CNT+0x186>
 1ce:	1b c0       	rjmp	.+54     	; 0x206 <TickFct_CNT+0x17a>
      case Increment:
         count = count +1;
 1d0:	80 91 61 00 	lds	r24, 0x0061
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 61 00 	sts	0x0061, r24
         COUNT_State = waiting;
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	80 93 62 00 	sts	0x0062, r24
		 flag = 1; 
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 60 00 	sts	0x0060, r24
         break;
 1e6:	08 95       	ret
      case Decrement:
         count = count - 1;
 1e8:	80 91 61 00 	lds	r24, 0x0061
 1ec:	81 50       	subi	r24, 0x01	; 1
 1ee:	80 93 61 00 	sts	0x0061, r24
         COUNT_State= waiting;
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	80 93 62 00 	sts	0x0062, r24
         flag = 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 60 00 	sts	0x0060, r24
         break;
 1fe:	08 95       	ret
      case waiting:
         COUNT_State = waiting;
		 flag = 0; 
 200:	10 92 60 00 	sts	0x0060, r1
         break;
 204:	08 95       	ret
      case both:
         count = 0;
 206:	10 92 61 00 	sts	0x0061, r1
		 flag = 0; 
 20a:	10 92 60 00 	sts	0x0060, r1
         COUNT_State = Init;
 20e:	10 92 62 00 	sts	0x0062, r1
 212:	08 95       	ret

00000214 <main>:
//DDRA: Configures each of port A's physical pins to input (0) or output (1)
//PORTA: Writing to this register writes the port's physical pins (Write only)
//PINA: Reading this register reads the values of the port's physical pins (Read only)
int main(void)
{
	COUNT_DDR = 0xFF; //Configures port B's 8 pins as outputs.
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	84 bb       	out	0x14, r24	; 20
	COUNT_OUTPORT = 0x00; //Initialize output on port C to 0x00;
 218:	15 ba       	out	0x15, r1	; 21
	INPUT_DDR = 0x00; // Configure Port A's 8 pins as inputs.
 21a:	1a ba       	out	0x1a, r1	; 26
	INPUT_OUTPORT = 0xFF; // Configure Port A's 8 pins as inputs.
 21c:	8b bb       	out	0x1b, r24	; 27
   //TimerSet(500);
   //TimerOn();
   COUNT_State = Init;
 21e:	10 92 62 00 	sts	0x0062, r1
   while(1)
   {
     TickFct_CNT ();
 222:	0e 94 46 00 	call	0x8c	; 0x8c <TickFct_CNT>
     //while(!TimerFlag) {}
        //TimerFlag = 0;
        COUNT_OUTPORT = count;
 226:	80 91 61 00 	lds	r24, 0x0061
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	fa cf       	rjmp	.-12     	; 0x222 <main+0xe>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>


jdefo002_lab3_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000033e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000003d2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000082  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000205  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000e7  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001cd  00000000  00000000  00000e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000174  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000021  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00001215  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  74:	0c 94 9d 01 	jmp	0x33a	; 0x33a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GetBit>:
#define DEBUG_OUTPORT	PORTC
// Additional macros not defines in sfr_defs.h
#define SET_PORT_BIT(OUTPORT, BIT)		OUTPORT |= (1 << BIT)
#define CLEAR_PORT_BIT(OUTPORT, BIT)	OUTPORT &= ~(1 << BIT)
unsigned char GetBit(unsigned char x_bit, unsigned char k) {
   return ((x_bit & (0x01 << k)) != 0);
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <GetBit+0x8>
  80:	95 95       	asr	r25
  82:	87 95       	ror	r24
  84:	6a 95       	dec	r22
  86:	e2 f7       	brpl	.-8      	; 0x80 <GetBit+0x4>
}
  88:	81 70       	andi	r24, 0x01	; 1
  8a:	08 95       	ret

0000008c <TickFct_DOOR>:
char flag = 0; 
char locked_flag = 0; // locked = 0, unlocked = 1; 
enum Door_States{Initial,button_p, button_Pound_wait, wait_y, Release, button_Y, button_lock, 
		locked_y_wait, locked_y} Door_State;
void TickFct_DOOR(){
   switch (Door_State){ // Transitions
  8c:	80 91 67 00 	lds	r24, 0x0067
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	09 f4       	brne	.+2      	; 0x96 <TickFct_DOOR+0xa>
  94:	90 c0       	rjmp	.+288    	; 0x1b6 <TickFct_DOOR+0x12a>
  96:	30 f4       	brcc	.+12     	; 0xa4 <TickFct_DOOR+0x18>
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	09 f4       	brne	.+2      	; 0x9e <TickFct_DOOR+0x12>
  9c:	43 c0       	rjmp	.+134    	; 0x124 <TickFct_DOOR+0x98>
  9e:	08 f0       	brcs	.+2      	; 0xa2 <TickFct_DOOR+0x16>
  a0:	55 c0       	rjmp	.+170    	; 0x14c <TickFct_DOOR+0xc0>
  a2:	09 c0       	rjmp	.+18     	; 0xb6 <TickFct_DOOR+0x2a>
  a4:	85 30       	cpi	r24, 0x05	; 5
  a6:	09 f4       	brne	.+2      	; 0xaa <TickFct_DOOR+0x1e>
  a8:	b7 c0       	rjmp	.+366    	; 0x218 <TickFct_DOOR+0x18c>
  aa:	08 f4       	brcc	.+2      	; 0xae <TickFct_DOOR+0x22>
  ac:	88 c0       	rjmp	.+272    	; 0x1be <TickFct_DOOR+0x132>
  ae:	87 30       	cpi	r24, 0x07	; 7
  b0:	09 f0       	breq	.+2      	; 0xb4 <TickFct_DOOR+0x28>
  b2:	c5 c0       	rjmp	.+394    	; 0x23e <TickFct_DOOR+0x1b2>
  b4:	b4 c0       	rjmp	.+360    	; 0x21e <TickFct_DOOR+0x192>
      case Initial: // state 0
		if ((x&&y)||(x&&pound)||(x&&lock)||(y&&pound)||(y&&lock)||(pound&&lock) ){
  b6:	80 91 63 00 	lds	r24, 0x0063
  ba:	88 23       	and	r24, r24
  bc:	69 f0       	breq	.+26     	; 0xd8 <TickFct_DOOR+0x4c>
  be:	80 91 66 00 	lds	r24, 0x0066
  c2:	81 11       	cpse	r24, r1
  c4:	1e c0       	rjmp	.+60     	; 0x102 <TickFct_DOOR+0x76>
  c6:	80 91 65 00 	lds	r24, 0x0065
  ca:	81 11       	cpse	r24, r1
  cc:	1a c0       	rjmp	.+52     	; 0x102 <TickFct_DOOR+0x76>
  ce:	80 91 64 00 	lds	r24, 0x0064
  d2:	81 11       	cpse	r24, r1
  d4:	16 c0       	rjmp	.+44     	; 0x102 <TickFct_DOOR+0x76>
  d6:	1d c0       	rjmp	.+58     	; 0x112 <TickFct_DOOR+0x86>
  d8:	80 91 66 00 	lds	r24, 0x0066
  dc:	88 23       	and	r24, r24
  de:	49 f0       	breq	.+18     	; 0xf2 <TickFct_DOOR+0x66>
  e0:	80 91 65 00 	lds	r24, 0x0065
  e4:	81 11       	cpse	r24, r1
  e6:	0d c0       	rjmp	.+26     	; 0x102 <TickFct_DOOR+0x76>
  e8:	80 91 64 00 	lds	r24, 0x0064
  ec:	81 11       	cpse	r24, r1
  ee:	09 c0       	rjmp	.+18     	; 0x102 <TickFct_DOOR+0x76>
  f0:	10 c0       	rjmp	.+32     	; 0x112 <TickFct_DOOR+0x86>
  f2:	90 91 65 00 	lds	r25, 0x0065
  f6:	99 23       	and	r25, r25
  f8:	61 f0       	breq	.+24     	; 0x112 <TickFct_DOOR+0x86>
  fa:	90 91 64 00 	lds	r25, 0x0064
  fe:	99 23       	and	r25, r25
 100:	21 f0       	breq	.+8      	; 0x10a <TickFct_DOOR+0x7e>
			Door_State = Release; 
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	80 93 67 00 	sts	0x0067, r24
 108:	bf c0       	rjmp	.+382    	; 0x288 <TickFct_DOOR+0x1fc>
		}
		else if (pound&&!y)
 10a:	88 23       	and	r24, r24
 10c:	09 f4       	brne	.+2      	; 0x110 <TickFct_DOOR+0x84>
 10e:	a9 c0       	rjmp	.+338    	; 0x262 <TickFct_DOOR+0x1d6>
 110:	e1 c0       	rjmp	.+450    	; 0x2d4 <TickFct_DOOR+0x248>
		{
			Door_State = button_p;
		}
		else if (lock){
 112:	80 91 64 00 	lds	r24, 0x0064
 116:	88 23       	and	r24, r24
 118:	09 f4       	brne	.+2      	; 0x11c <TickFct_DOOR+0x90>
 11a:	dc c0       	rjmp	.+440    	; 0x2d4 <TickFct_DOOR+0x248>
			Door_State = button_lock;
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	80 93 67 00 	sts	0x0067, r24
 122:	c0 c0       	rjmp	.+384    	; 0x2a4 <TickFct_DOOR+0x218>
		}		
        break;
	  case button_p: // state 1
		if (!pound && y) {
 124:	80 91 65 00 	lds	r24, 0x0065
 128:	81 11       	cpse	r24, r1
 12a:	0c c0       	rjmp	.+24     	; 0x144 <TickFct_DOOR+0xb8>
 12c:	80 91 66 00 	lds	r24, 0x0066
 130:	88 23       	and	r24, r24
 132:	21 f0       	breq	.+8      	; 0x13c <TickFct_DOOR+0xb0>
			Door_State = button_Y;
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	80 93 67 00 	sts	0x0067, r24
 13a:	aa c0       	rjmp	.+340    	; 0x290 <TickFct_DOOR+0x204>
		}
		else if (!pound && !y) {
			Door_State = wait_y;
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 93 67 00 	sts	0x0067, r24
 142:	9c c0       	rjmp	.+312    	; 0x27c <TickFct_DOOR+0x1f0>
		} 

		else
		{
			Door_State = button_Pound_wait;
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	80 93 67 00 	sts	0x0067, r24
 14a:	94 c0       	rjmp	.+296    	; 0x274 <TickFct_DOOR+0x1e8>
		}			
		
		break;
      case button_Pound_wait:  // state 2
		if ((x&&y)||(x&&pound)||(x&&lock)||(y&&pound)||(y&&lock)||(pound&&lock) ){
 14c:	80 91 63 00 	lds	r24, 0x0063
 150:	88 23       	and	r24, r24
 152:	69 f0       	breq	.+26     	; 0x16e <TickFct_DOOR+0xe2>
 154:	80 91 66 00 	lds	r24, 0x0066
 158:	81 11       	cpse	r24, r1
 15a:	1b c0       	rjmp	.+54     	; 0x192 <TickFct_DOOR+0x106>
 15c:	80 91 65 00 	lds	r24, 0x0065
 160:	81 11       	cpse	r24, r1
 162:	17 c0       	rjmp	.+46     	; 0x192 <TickFct_DOOR+0x106>
 164:	80 91 64 00 	lds	r24, 0x0064
 168:	81 11       	cpse	r24, r1
 16a:	13 c0       	rjmp	.+38     	; 0x192 <TickFct_DOOR+0x106>
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <TickFct_DOOR+0x122>
 16e:	80 91 66 00 	lds	r24, 0x0066
 172:	88 23       	and	r24, r24
 174:	09 f4       	brne	.+2      	; 0x178 <TickFct_DOOR+0xec>
 176:	b5 c0       	rjmp	.+362    	; 0x2e2 <TickFct_DOOR+0x256>
 178:	80 91 65 00 	lds	r24, 0x0065
 17c:	81 11       	cpse	r24, r1
 17e:	09 c0       	rjmp	.+18     	; 0x192 <TickFct_DOOR+0x106>
 180:	80 91 64 00 	lds	r24, 0x0064
 184:	81 11       	cpse	r24, r1
 186:	05 c0       	rjmp	.+10     	; 0x192 <TickFct_DOOR+0x106>
 188:	a8 c0       	rjmp	.+336    	; 0x2da <TickFct_DOOR+0x24e>
 18a:	80 91 64 00 	lds	r24, 0x0064
 18e:	88 23       	and	r24, r24
 190:	21 f0       	breq	.+8      	; 0x19a <TickFct_DOOR+0x10e>
			Door_State = Release;
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	80 93 67 00 	sts	0x0067, r24
 198:	77 c0       	rjmp	.+238    	; 0x288 <TickFct_DOOR+0x1fc>
		}
		else if (pound && flag && locked_flag)
 19a:	80 91 61 00 	lds	r24, 0x0061
 19e:	88 23       	and	r24, r24
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <TickFct_DOOR+0x118>
 1a2:	68 c0       	rjmp	.+208    	; 0x274 <TickFct_DOOR+0x1e8>
 1a4:	80 91 60 00 	lds	r24, 0x0060
 1a8:	81 11       	cpse	r24, r1
 1aa:	85 c0       	rjmp	.+266    	; 0x2b6 <TickFct_DOOR+0x22a>
 1ac:	63 c0       	rjmp	.+198    	; 0x274 <TickFct_DOOR+0x1e8>
		}
		else if (!pound && y) {
			Door_State = button_Y;
		}
		else if (!pound && !y) {
			Door_State = wait_y;
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	80 93 67 00 	sts	0x0067, r24
 1b4:	63 c0       	rjmp	.+198    	; 0x27c <TickFct_DOOR+0x1f0>
		}
        break;
	  case wait_y: // state 3
		if ((pound && !y) || (pound && y))
 1b6:	80 91 65 00 	lds	r24, 0x0065
 1ba:	81 11       	cpse	r24, r1
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <TickFct_DOOR+0x132>
		else if (!pound && y)
		{
			Door_State = button_Y;
		}
      case Release: // state 4
		if ((x&&y)||(x&&pound)||(x&&lock)||(y&&pound)||(y&&lock)||(pound&&lock) ){
 1be:	80 91 63 00 	lds	r24, 0x0063
 1c2:	88 23       	and	r24, r24
 1c4:	69 f0       	breq	.+26     	; 0x1e0 <TickFct_DOOR+0x154>
 1c6:	80 91 66 00 	lds	r24, 0x0066
 1ca:	81 11       	cpse	r24, r1
 1cc:	1e c0       	rjmp	.+60     	; 0x20a <TickFct_DOOR+0x17e>
 1ce:	80 91 65 00 	lds	r24, 0x0065
 1d2:	81 11       	cpse	r24, r1
 1d4:	1a c0       	rjmp	.+52     	; 0x20a <TickFct_DOOR+0x17e>
 1d6:	80 91 64 00 	lds	r24, 0x0064
 1da:	81 11       	cpse	r24, r1
 1dc:	16 c0       	rjmp	.+44     	; 0x20a <TickFct_DOOR+0x17e>
 1de:	19 c0       	rjmp	.+50     	; 0x212 <TickFct_DOOR+0x186>
 1e0:	80 91 66 00 	lds	r24, 0x0066
 1e4:	88 23       	and	r24, r24
 1e6:	49 f0       	breq	.+18     	; 0x1fa <TickFct_DOOR+0x16e>
 1e8:	80 91 65 00 	lds	r24, 0x0065
 1ec:	81 11       	cpse	r24, r1
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <TickFct_DOOR+0x17e>
 1f0:	80 91 64 00 	lds	r24, 0x0064
 1f4:	81 11       	cpse	r24, r1
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <TickFct_DOOR+0x17e>
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <TickFct_DOOR+0x186>
 1fa:	80 91 65 00 	lds	r24, 0x0065
 1fe:	88 23       	and	r24, r24
 200:	41 f0       	breq	.+16     	; 0x212 <TickFct_DOOR+0x186>
 202:	80 91 64 00 	lds	r24, 0x0064
 206:	88 23       	and	r24, r24
 208:	21 f0       	breq	.+8      	; 0x212 <TickFct_DOOR+0x186>
			Door_State = Release; 
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	80 93 67 00 	sts	0x0067, r24
 210:	3b c0       	rjmp	.+118    	; 0x288 <TickFct_DOOR+0x1fc>
		}
		else 
		{
			Door_State = Initial; 
 212:	10 92 67 00 	sts	0x0067, r1
 216:	5e c0       	rjmp	.+188    	; 0x2d4 <TickFct_DOOR+0x248>
		}
         break;
      case button_Y:// state 5
		 Door_State = Initial;
 218:	10 92 67 00 	sts	0x0067, r1
         break;
 21c:	5b c0       	rjmp	.+182    	; 0x2d4 <TickFct_DOOR+0x248>
      case button_lock:// state 6
         break;
	  case locked_y_wait: // state 7 
		 if ((pound && !y) || (pound && y))
 21e:	80 91 65 00 	lds	r24, 0x0065
 222:	88 23       	and	r24, r24
 224:	19 f0       	breq	.+6      	; 0x22c <TickFct_DOOR+0x1a0>
		{
			Door_State = Initial;
 226:	10 92 67 00 	sts	0x0067, r1
 22a:	54 c0       	rjmp	.+168    	; 0x2d4 <TickFct_DOOR+0x248>
		}
		else if (!pound && !y)
 22c:	80 91 66 00 	lds	r24, 0x0066
 230:	88 23       	and	r24, r24
 232:	09 f4       	brne	.+2      	; 0x236 <TickFct_DOOR+0x1aa>
 234:	40 c0       	rjmp	.+128    	; 0x2b6 <TickFct_DOOR+0x22a>
		{
			Door_State = locked_y_wait;
		}
		else if (!pound && y)
		{
			Door_State = locked_y;
 236:	88 e0       	ldi	r24, 0x08	; 8
 238:	80 93 67 00 	sts	0x0067, r24
 23c:	42 c0       	rjmp	.+132    	; 0x2c2 <TickFct_DOOR+0x236>
		
         break;

   }

   switch (Door_State){ //State Actions
 23e:	84 30       	cpi	r24, 0x04	; 4
 240:	19 f1       	breq	.+70     	; 0x288 <TickFct_DOOR+0x1fc>
 242:	38 f4       	brcc	.+14     	; 0x252 <TickFct_DOOR+0x1c6>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	b1 f0       	breq	.+44     	; 0x274 <TickFct_DOOR+0x1e8>
 248:	c8 f4       	brcc	.+50     	; 0x27c <TickFct_DOOR+0x1f0>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	09 f0       	breq	.+2      	; 0x250 <TickFct_DOOR+0x1c4>
 24e:	42 c0       	rjmp	.+132    	; 0x2d4 <TickFct_DOOR+0x248>
 250:	08 c0       	rjmp	.+16     	; 0x262 <TickFct_DOOR+0x1d6>
 252:	86 30       	cpi	r24, 0x06	; 6
 254:	39 f1       	breq	.+78     	; 0x2a4 <TickFct_DOOR+0x218>
 256:	e0 f0       	brcs	.+56     	; 0x290 <TickFct_DOOR+0x204>
 258:	87 30       	cpi	r24, 0x07	; 7
 25a:	69 f1       	breq	.+90     	; 0x2b6 <TickFct_DOOR+0x22a>
 25c:	88 30       	cpi	r24, 0x08	; 8
 25e:	d1 f5       	brne	.+116    	; 0x2d4 <TickFct_DOOR+0x248>
 260:	30 c0       	rjmp	.+96     	; 0x2c2 <TickFct_DOOR+0x236>
	   case button_p:
		Door_State = button_Pound_wait;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	80 93 67 00 	sts	0x0067, r24
		flag = 1; 
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 61 00 	sts	0x0061, r24
		state_num = 1; 
 26e:	80 93 62 00 	sts	0x0062, r24
		break; 
 272:	08 95       	ret
      case button_Pound_wait:
		 state_num = 2; 
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	80 93 62 00 	sts	0x0062, r24
         break;
 27a:	08 95       	ret
	  case wait_y:
		 flag = 0;
 27c:	10 92 61 00 	sts	0x0061, r1
		 state_num = 3; 
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	80 93 62 00 	sts	0x0062, r24
		 break; 
 286:	08 95       	ret
      case Release:
		  state_num = 4; 
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	80 93 62 00 	sts	0x0062, r24
         break;
 28e:	08 95       	ret
      case button_Y:
		 SET_PORT_BIT(DOOR_OUTPORT, 0);
 290:	c0 9a       	sbi	0x18, 0	; 24
		 flag = 0; 
 292:	10 92 61 00 	sts	0x0061, r1
		 state_num = 5; 
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	80 93 62 00 	sts	0x0062, r24
		 locked_flag = 1; 
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 60 00 	sts	0x0060, r24
         break;
 2a2:	08 95       	ret
      case button_lock:
		 CLEAR_PORT_BIT(DOOR_OUTPORT,0);
 2a4:	c0 98       	cbi	0x18, 0	; 24
		 Door_State = Initial;
 2a6:	10 92 67 00 	sts	0x0067, r1
		 state_num = 6; 
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	80 93 62 00 	sts	0x0062, r24
		 locked_flag = 0; 
 2b0:	10 92 60 00 	sts	0x0060, r1
         break;
 2b4:	08 95       	ret
	  case locked_y_wait: 
		 state_num = 7; 
 2b6:	87 e0       	ldi	r24, 0x07	; 7
 2b8:	80 93 62 00 	sts	0x0062, r24
		 Door_State = locked_y_wait; 
 2bc:	80 93 67 00 	sts	0x0067, r24
		 break; 
 2c0:	08 95       	ret
      case locked_y:
		 state_num = 8; 
 2c2:	88 e0       	ldi	r24, 0x08	; 8
 2c4:	80 93 62 00 	sts	0x0062, r24
		 CLEAR_PORT_BIT(DOOR_OUTPORT, 0); 
 2c8:	c0 98       	cbi	0x18, 0	; 24
		 locked_flag = 0;
 2ca:	10 92 60 00 	sts	0x0060, r1
		 Door_State = Initial;  
 2ce:	10 92 67 00 	sts	0x0067, r1
		 break; 
 2d2:	08 95       	ret
	  default:
		 state_num= 0; 
 2d4:	10 92 62 00 	sts	0x0062, r1
         break;
 2d8:	08 95       	ret
		else if (pound && flag && !locked_flag)
		{
			Door_State = button_Pound_wait;
		}
		else if (!pound && y) {
			Door_State = button_Y;
 2da:	85 e0       	ldi	r24, 0x05	; 5
 2dc:	80 93 67 00 	sts	0x0067, r24
 2e0:	d7 cf       	rjmp	.-82     	; 0x290 <TickFct_DOOR+0x204>
			Door_State = button_Pound_wait;
		}			
		
		break;
      case button_Pound_wait:  // state 2
		if ((x&&y)||(x&&pound)||(x&&lock)||(y&&pound)||(y&&lock)||(pound&&lock) ){
 2e2:	80 91 65 00 	lds	r24, 0x0065
 2e6:	81 11       	cpse	r24, r1
 2e8:	50 cf       	rjmp	.-352    	; 0x18a <TickFct_DOOR+0xfe>
 2ea:	61 cf       	rjmp	.-318    	; 0x1ae <TickFct_DOOR+0x122>

000002ec <main>:
//DDRA: Configures each of port A's physical pins to input (0) or output (1)
//PORTA: Writing to this register writes the port's physical pins (Write only)
//PINA: Reading this register reads the values of the port's physical pins (Read only)
int main(void)
{
	DOOR_DDR = 0xFF; //Configures port B's 8 pins as outputs.
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	87 bb       	out	0x17, r24	; 23
	DOOR_OUTPORT = 0x00; //Initialize output on port B to 0x00;
 2f0:	18 ba       	out	0x18, r1	; 24
	DEBUG_DDR = 0xFF; //Configures port C's 8 pins as outputs.
 2f2:	84 bb       	out	0x14, r24	; 20
	DEBUG_OUTPORT = 0x00; //Initialize output on port C to 0x00;
 2f4:	15 ba       	out	0x15, r1	; 21
	INPUT_DDR = 0x00; // Configure Port A's 8 pins as inputs.
 2f6:	1a ba       	out	0x1a, r1	; 26
	INPUT_OUTPORT = 0xFF; // Configure Port A's 8 pins as inputs.
 2f8:	8b bb       	out	0x1b, r24	; 27
   Door_State = Initial;
 2fa:	10 92 67 00 	sts	0x0067, r1
   while(1)
   {
	 x = GetBit(INPUT_INPORT, 0);
 2fe:	89 b3       	in	r24, 0x19	; 25
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 306:	80 93 63 00 	sts	0x0063, r24
	 y = GetBit(INPUT_INPORT, 1);
 30a:	89 b3       	in	r24, 0x19	; 25
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 312:	80 93 66 00 	sts	0x0066, r24
	 pound = GetBit(INPUT_INPORT, 2);
 316:	89 b3       	in	r24, 0x19	; 25
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 31e:	80 93 65 00 	sts	0x0065, r24
	 lock = GetBit(INPUT_INPORT, 7);
 322:	89 b3       	in	r24, 0x19	; 25
 324:	67 e0       	ldi	r22, 0x07	; 7
 326:	0e 94 3e 00 	call	0x7c	; 0x7c <GetBit>
 32a:	80 93 64 00 	sts	0x0064, r24
     TickFct_DOOR ();
 32e:	0e 94 46 00 	call	0x8c	; 0x8c <TickFct_DOOR>
     DEBUG_OUTPORT = state_num;
 332:	80 91 62 00 	lds	r24, 0x0062
 336:	85 bb       	out	0x15, r24	; 21
 338:	e2 cf       	rjmp	.-60     	; 0x2fe <main+0x12>

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
